<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa_s1xx_iot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa_s1xx_iot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Apr 06 10:57:57 2016
<BR><P>
<H3>Maximum Stack Usage =        684 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
port_data_callback &rArr; coap_transport_read &rArr; send_error_response &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[51]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[50]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a><BR>
 <LI><a href="#[cd]">generate_path</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cd]">generate_path</a><BR>
 <LI><a href="#[4f]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_twis.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI2_EGU2_IRQHandler</a> from softdevice_handler.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[31]">_sputc</a> from printf3.o(i._sputc) referenced from printf3.o(i.__0sprintf$3)
 <LI><a href="#[4c]">ack_error</a> from nrf_drv_twi.o(i.ack_error) referenced 4 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[45]">address_req</a> from nrf_drv_twi.o(i.address_req) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[44]">app_coap_time_tick</a> from main.o(i.app_coap_time_tick) referenced from main.o(.constdata)
 <LI><a href="#[3a]">ble_6lowpan_evt_handler</a> from ipv6.o(i.ble_6lowpan_evt_handler) referenced from ipv6.o(i.ipv6_init)
 <LI><a href="#[35]">ble_evt_dispatch</a> from ipv6_medium_ble.o(i.ble_evt_dispatch) referenced from ipv6_medium_ble.o(i.ble_stack_init)
 <LI><a href="#[43]">blink_timeout_handler</a> from main.o(i.blink_timeout_handler) referenced from main.o(.constdata)
 <LI><a href="#[0]">button_event_handler</a> from main.o(i.button_event_handler) referenced 2 times from main.o(.data)
 <LI><a href="#[40]">coap_error_handler</a> from main.o(i.coap_error_handler) referenced from main.o(i.main)
 <LI><a href="#[33]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[32]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[3f]">icmp6_handler</a> from main.o(i.icmp6_handler) referenced from main.o(i.main)
 <LI><a href="#[3b]">iot_timer_tick_callback</a> from main.o(i.iot_timer_tick_callback) referenced from main.o(i.main)
 <LI><a href="#[3e]">ip_app_handler</a> from main.o(i.ip_app_handler) referenced from main.o(i.main)
 <LI><a href="#[34]">ipsp_evt_handler</a> from ble_6lowpan.o(i.ipsp_evt_handler) referenced from ble_6lowpan.o(i.ble_6lowpan_init)
 <LI><a href="#[38]">led3_callback</a> from main.o(i.led3_callback) referenced from main.o(i.coap_endpoints_init)
 <LI><a href="#[2e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[41]">observer_con_message_callback</a> from main.o(i.observer_con_message_callback) referenced from main.o(i.notify_all_led3_subscribers)
 <LI><a href="#[49]">on_error</a> from nrf_drv_twi.o(i.on_error) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[3d]">on_ipv6_medium_error</a> from main.o(i.on_ipv6_medium_error) referenced from main.o(i.main)
 <LI><a href="#[3c]">on_ipv6_medium_evt</a> from main.o(i.on_ipv6_medium_evt) referenced from main.o(i.main)
 <LI><a href="#[39]">port_data_callback</a> from coap_transport_ipv6.o(i.port_data_callback) referenced from coap_transport_ipv6.o(i.coap_transport_init)
 <LI><a href="#[46]">rx_address_req</a> from nrf_drv_twi.o(i.rx_address_req) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[4b]">rx_done</a> from nrf_drv_twi.o(i.rx_done) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[4a]">rx_prepare</a> from nrf_drv_twi.o(i.rx_prepare) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[42]">softdevice_assertion_handler</a> from softdevice_handler.o(i.softdevice_assertion_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[36]">sys_evt_dispatch</a> from ipv6_medium_ble.o(i.sys_evt_dispatch) referenced from ipv6_medium_ble.o(i.ble_stack_init)
 <LI><a href="#[47]">tx_done</a> from nrf_drv_twi.o(i.tx_done) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[48]">tx_prepare</a> from nrf_drv_twi.o(i.tx_prepare) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[37]">well_known_core_callback</a> from main.o(i.well_known_core_callback) referenced from main.o(i.coap_endpoints_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[55]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[137]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[138]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[139]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[13a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[13b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4f]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[50]"></a>__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nrf_drv_twi.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
</UL>

<P><STRONG><a name="[51]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_create
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_remote_addr_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_payload_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_path
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_option
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_encode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_send
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_server_register
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_add
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_input
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_well_known_generate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_new
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_new
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_remove
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_add
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_init
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>

<P><STRONG><a name="[ca]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_well_known_generate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_create
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_path
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_get
</UL>

<P><STRONG><a name="[6b]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_sendto
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_server_search
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_item_by_token_get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_find_by_prefix
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_address_remove
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_context_cover_iid
</UL>

<P><STRONG><a name="[12f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measruing
</UL>

<P><STRONG><a name="[cc]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_get
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; nrf_drv_twi_int_handler &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twis.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; nrf_drv_twis_state_machine &rArr; nrf_drv_twis_process_error
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_state_machine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SystemInit</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__0sprintf$3</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[144]"></a>__1sprintf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)

<P><STRONG><a name="[12e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measruing
</UL>

<P><STRONG><a name="[145]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[146]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[147]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6d]"></a>adv_data_encode</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_role_encode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[76]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>app_button_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>app_error_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_eui64_get
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observer_con_message_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_app_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_tick_callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_endpoints_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_apply
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>app_timer_create</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>app_timer_init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>app_timer_start</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[89]"></a>app_timer_stop</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[90]"></a>ble_6lowpan_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ble_6lowpan.o(i.ble_6lowpan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_6lowpan_init &rArr; ble_ipsp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
</UL>

<P><STRONG><a name="[93]"></a>ble_6lowpan_interface_send</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ble_6lowpan.o(i.ble_6lowpan_interface_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_send
</UL>

<P><STRONG><a name="[96]"></a>ble_advdata_set</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[98]"></a>ble_ipsp_disconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_ipsp.o(i.ble_ipsp_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_ipsp_disconnect &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_search
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[9a]"></a>ble_ipsp_evt_handler</STRONG> (Thumb, 744 bytes, Stack size 104 bytes, ble_ipsp.o(i.ble_ipsp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_ipsp_evt_handler &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_search
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[92]"></a>ble_ipsp_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_ipsp.o(i.ble_ipsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ipsp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_init
</UL>

<P><STRONG><a name="[9c]"></a>ble_ipsp_send</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_ipsp.o(i.ble_ipsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_ipsp_send &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_search
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
</UL>

<P><STRONG><a name="[11a]"></a>coap_error_handler_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coap.o(i.coap_error_handler_register))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>coap_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, coap.o(i.coap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = coap_init &rArr; coap_transport_init &rArr; udp6_socket_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>coap_message_accept_mask_get</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, coap_message.o(i.coap_message_accept_mask_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coap_message_accept_mask_get &rArr; coap_opt_uint_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_opt_uint_decode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_format_to_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_ct_match_select
</UL>

<P><STRONG><a name="[b7]"></a>coap_message_create</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, coap_message.o(i.coap_message_create))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_new
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
</UL>

<P><STRONG><a name="[ad]"></a>coap_message_ct_match_select</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, coap_message.o(i.coap_message_ct_match_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = coap_message_ct_match_select &rArr; coap_message_accept_mask_get &rArr; coap_opt_uint_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_accept_mask_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[ae]"></a>coap_message_decode</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, coap_message.o(i.coap_message_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = coap_message_decode &rArr; decode_option
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_option
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>

<P><STRONG><a name="[b0]"></a>coap_message_delete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, coap.o(i.coap_message_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = coap_message_delete &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[b1]"></a>coap_message_encode</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, coap_message.o(i.coap_message_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = coap_message_encode &rArr; encode_option
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_option
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
</UL>

<P><STRONG><a name="[b4]"></a>coap_message_new</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, coap.o(i.coap_message_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = coap_message_new &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_create
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[111]"></a>coap_message_opt_present</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, coap_message.o(i.coap_message_opt_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_message_opt_present
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[b8]"></a>coap_message_opt_uint_add</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, coap_message.o(i.coap_message_opt_uint_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = coap_message_opt_uint_add &rArr; encode_option
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_opt_uint_encode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_option
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[ba]"></a>coap_message_payload_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, coap_message.o(i.coap_message_payload_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_message_payload_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[bb]"></a>coap_message_remote_addr_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, coap_message.o(i.coap_message_remote_addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_message_remote_addr_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
</UL>

<P><STRONG><a name="[bc]"></a>coap_message_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap.o(i.coap_message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = coap_message_send &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;well_known_core_callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[be]"></a>coap_observe_server_next_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap_observe.o(i.coap_observe_server_next_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_observe_server_next_get &rArr; internal_coap_observe_server_next_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_server_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
</UL>

<P><STRONG><a name="[c0]"></a>coap_observe_server_register</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap_observe.o(i.coap_observe_server_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = coap_observe_server_register &rArr; internal_coap_observe_server_register &rArr; coap_observe_server_search &rArr; internal_coap_observe_server_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_server_register
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[c2]"></a>coap_observe_server_search</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap_observe.o(i.coap_observe_server_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = coap_observe_server_search &rArr; internal_coap_observe_server_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_server_search
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observer_con_message_callback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_server_register
</UL>

<P><STRONG><a name="[c4]"></a>coap_observe_server_unregister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap_observe.o(i.coap_observe_server_unregister))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_observe_server_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;observer_con_message_callback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
</UL>

<P><STRONG><a name="[ab]"></a>coap_opt_uint_decode</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, coap_option.o(i.coap_opt_uint_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_opt_uint_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_accept_mask_get
</UL>

<P><STRONG><a name="[b9]"></a>coap_opt_uint_encode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, coap_option.o(i.coap_opt_uint_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_opt_uint_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_opt_uint_add
</UL>

<P><STRONG><a name="[c6]"></a>coap_queue_add</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, coap_queue.o(i.coap_queue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_queue_add
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
</UL>

<P><STRONG><a name="[a8]"></a>coap_queue_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, coap_queue.o(i.coap_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init
</UL>

<P><STRONG><a name="[d9]"></a>coap_queue_item_by_mid_get</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, coap_queue.o(i.coap_queue_item_by_mid_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_queue_item_by_mid_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>

<P><STRONG><a name="[c8]"></a>coap_queue_item_by_token_get</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, coap_queue.o(i.coap_queue_item_by_token_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = coap_queue_item_by_token_get &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>

<P><STRONG><a name="[cf]"></a>coap_queue_item_next_get</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, coap_queue.o(i.coap_queue_item_next_get))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_time_tick
</UL>

<P><STRONG><a name="[c9]"></a>coap_queue_remove</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, coap_queue.o(i.coap_queue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_queue_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_time_tick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>

<P><STRONG><a name="[a3]"></a>coap_resource_child_add</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, coap_resource.o(i.coap_resource_child_add))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_endpoints_init
</UL>

<P><STRONG><a name="[a2]"></a>coap_resource_create</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, coap_resource.o(i.coap_resource_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_resource_create
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_endpoints_init
</UL>

<P><STRONG><a name="[cb]"></a>coap_resource_get</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, coap_resource.o(i.coap_resource_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = coap_resource_get &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>

<P><STRONG><a name="[a9]"></a>coap_resource_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coap_resource.o(i.coap_resource_init))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init
</UL>

<P><STRONG><a name="[a4]"></a>coap_resource_well_known_generate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, coap_resource.o(i.coap_resource_well_known_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = coap_resource_well_known_generate &rArr; generate_path &rArr;  generate_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_path
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_endpoints_init
</UL>

<P><STRONG><a name="[7d]"></a>coap_time_tick</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, coap.o(i.coap_time_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = coap_time_tick &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_process
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_remove
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_item_next_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_coap_time_tick
</UL>

<P><STRONG><a name="[a7]"></a>coap_transport_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, coap_transport_ipv6.o(i.coap_transport_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = coap_transport_init &rArr; udp6_socket_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_recv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_free
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_bind
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_app_data_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init
</UL>

<P><STRONG><a name="[ce]"></a>coap_transport_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coap_transport_ipv6.o(i.coap_transport_process))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_time_tick
</UL>

<P><STRONG><a name="[d7]"></a>coap_transport_read</STRONG> (Thumb, 578 bytes, Stack size 176 bytes, coap.o(i.coap_transport_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = coap_transport_read &rArr; send_error_response &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_remove
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_item_by_token_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_item_by_mid_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_decode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_response
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_request
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ack
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_notify
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_data_callback
</UL>

<P><STRONG><a name="[d0]"></a>coap_transport_write</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, coap_transport_ipv6.o(i.coap_transport_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_sendto
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_free
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_allocate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_time_tick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
</UL>

<P><STRONG><a name="[3f]"></a>icmp6_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.icmp6_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[10d]"></a>icmp6_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icmp6.o(i.icmp6_init))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
</UL>

<P><STRONG><a name="[ee]"></a>icmp6_input</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, icmp6.o(i.icmp6_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = icmp6_input &rArr; echo_reply_send &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_checksum_calculate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_input
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_input
</UL>

<P><STRONG><a name="[119]"></a>icmp6_receive_register</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, icmp6.o(i.icmp6_receive_register))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>icmp6_rs_send</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, icmp6.o(i.icmp6_rs_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = icmp6_rs_send &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_allocate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_checksum_calculate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_ip_header
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sllao_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_app_handler
</UL>

<P><STRONG><a name="[5f]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>internal_coap_message_send</STRONG> (Thumb, 262 bytes, Stack size 104 bytes, coap.o(i.internal_coap_message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_queue_add
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_encode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_request
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_response
</UL>

<P><STRONG><a name="[a6]"></a>internal_coap_observe_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, coap_observe.o(i.internal_coap_observe_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = internal_coap_observe_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init
</UL>

<P><STRONG><a name="[bf]"></a>internal_coap_observe_server_next_get</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, coap_observe.o(i.internal_coap_observe_server_next_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = internal_coap_observe_server_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_next_get
</UL>

<P><STRONG><a name="[c1]"></a>internal_coap_observe_server_register</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, coap_observe.o(i.internal_coap_observe_server_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = internal_coap_observe_server_register &rArr; coap_observe_server_search &rArr; internal_coap_observe_server_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_search
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_register
</UL>

<P><STRONG><a name="[c3]"></a>internal_coap_observe_server_search</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, coap_observe.o(i.internal_coap_observe_server_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = internal_coap_observe_server_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_search
</UL>

<P><STRONG><a name="[c5]"></a>internal_coap_observe_server_unregister</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, coap_observe.o(i.internal_coap_observe_server_unregister))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_unregister
</UL>

<P><STRONG><a name="[f5]"></a>iot_context_manager_get_by_addr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iot_context_manager.o(i.iot_context_manager_get_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_find_by_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
</UL>

<P><STRONG><a name="[f7]"></a>iot_context_manager_get_by_cid</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iot_context_manager.o(i.iot_context_manager_get_by_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iot_context_manager_get_by_cid &rArr; context_find_by_cid
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_find_by_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_input
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
</UL>

<P><STRONG><a name="[f9]"></a>iot_context_manager_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iot_context_manager.o(i.iot_context_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iot_context_manager_init &rArr; context_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
</UL>

<P><STRONG><a name="[fa]"></a>iot_context_manager_remove</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iot_context_manager.o(i.iot_context_manager_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iot_context_manager_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_input
</UL>

<P><STRONG><a name="[8a]"></a>iot_context_manager_table_alloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, iot_context_manager.o(i.iot_context_manager_table_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iot_context_manager_table_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_evt_handler
</UL>

<P><STRONG><a name="[8b]"></a>iot_context_manager_table_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iot_context_manager.o(i.iot_context_manager_table_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iot_context_manager_table_free &rArr; context_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_evt_handler
</UL>

<P><STRONG><a name="[fb]"></a>iot_context_manager_update</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, iot_context_manager.o(i.iot_context_manager_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iot_context_manager_update &rArr; context_find_by_cid
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_find_by_cid
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_input
</UL>

<P><STRONG><a name="[8d]"></a>iot_pbuffer_allocate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, iot_pbuffer.o(i.iot_pbuffer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = iot_pbuffer_allocate &rArr; pbuffer_allocate &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_offset_get
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuffer_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_rs_send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_evt_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_send
</UL>

<P><STRONG><a name="[dd]"></a>iot_pbuffer_free</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iot_pbuffer.o(i.iot_pbuffer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = iot_pbuffer_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuffer_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuffer_find
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_input
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_send
</UL>

<P><STRONG><a name="[100]"></a>iot_pbuffer_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iot_pbuffer.o(i.iot_pbuffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iot_pbuffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
</UL>

<P><STRONG><a name="[11b]"></a>iot_timer_client_list_set</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, iot_timer.o(i.iot_timer_client_list_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iot_timer_client_list_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>iot_timer_update</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, iot_timer.o(i.iot_timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iot_timer_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_tick_callback
</UL>

<P><STRONG><a name="[134]"></a>ipv6_address_find_best_match</STRONG> (Thumb, 210 bytes, Stack size 36 bytes, ipv6.o(i.ipv6_address_find_best_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6_address_find_best_match
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_sendto
</UL>

<P><STRONG><a name="[108]"></a>ipv6_address_remove</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipv6.o(i.ipv6_address_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6_address_remove &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_free
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_input
</UL>

<P><STRONG><a name="[109]"></a>ipv6_address_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ipv6.o(i.ipv6_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6_address_set &rArr; addr_set &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_input
</UL>

<P><STRONG><a name="[e8]"></a>ipv6_checksum_calculate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ipv6_utils.o(i.ipv6_checksum_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6_checksum_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_rs_send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_sendto
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_send
</UL>

<P><STRONG><a name="[f2]"></a>ipv6_header_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ipv6_utils.o(i.ipv6_header_init))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_ip_header
</UL>

<P><STRONG><a name="[10a]"></a>ipv6_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ipv6.o(i.ipv6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipv6_init &rArr; iot_context_manager_init &rArr; context_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_reset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>ipv6_medium_connectable_mode_enter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ipv6_medium_ble.o(i.ipv6_medium_connectable_mode_enter))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
</UL>

<P><STRONG><a name="[117]"></a>ipv6_medium_eui48_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ipv6_medium_ble.o(i.ipv6_medium_eui48_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6_medium_eui48_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>ipv6_medium_eui48_set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipv6_medium_ble.o(i.ipv6_medium_eui48_set))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>ipv6_medium_eui64_get</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ipv6_medium_ble.o(i.ipv6_medium_eui64_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv6_medium_eui64_get &rArr; app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>ipv6_medium_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ipv6_medium_ble.o(i.ipv6_medium_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ipv6_medium_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_apply
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>ipv6_send</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv6.o(i.ipv6_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_interface_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_rs_send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_sendto
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_send
</UL>

<P><STRONG><a name="[2e]"></a>main</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; ipv6_medium_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_eui64_get
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_eui48_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_eui48_get
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_client_list_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_receive_register
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_error_handler_register
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measruing
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_endpoints_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[102]"></a>nrf_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_app_handler
</UL>

<P><STRONG><a name="[122]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[77]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[7b]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[e5]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[7a]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_gpiote_init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[79]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[115]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>nrf_drv_twi_init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_drv_twi_rx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measruing
</UL>

<P><STRONG><a name="[116]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measruing
</UL>

<P><STRONG><a name="[8e]"></a>nrf_free</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mem_manager.o(i.nrf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_size
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_time_tick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_delete
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_response
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_evt_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_complete
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[10b]"></a>nrf_mem_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mem_manager.o(i.nrf_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_mem_init &rArr; block_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
</UL>

<P><STRONG><a name="[b5]"></a>nrf_mem_reserve</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, mem_manager.o(i.nrf_mem_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_size
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_new
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuffer_allocate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[42]"></a>softdevice_assertion_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_assertion_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_assertion_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[9f]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[9e]"></a>softdevice_handler_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[a0]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[d2]"></a>udp6_socket_allocate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, udp6.o(i.udp6_socket_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp6_socket_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_init
</UL>

<P><STRONG><a name="[d6]"></a>udp6_socket_app_data_set</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, udp6.o(i.udp6_socket_app_data_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_init
</UL>

<P><STRONG><a name="[d3]"></a>udp6_socket_bind</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, udp6.o(i.udp6_socket_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp6_socket_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_init
</UL>

<P><STRONG><a name="[d5]"></a>udp6_socket_free</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, udp6.o(i.udp6_socket_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp6_socket_free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_init
</UL>

<P><STRONG><a name="[d4]"></a>udp6_socket_recv</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, udp6.o(i.udp6_socket_recv))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_init
</UL>

<P><STRONG><a name="[dc]"></a>udp6_socket_sendto</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, udp6.o(i.udp6_socket_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_address_find_best_match
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_checksum_calculate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_write
</UL>

<P><STRONG><a name="[10c]"></a>udp_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, udp6.o(i.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
</UL>

<P><STRONG><a name="[10e]"></a>udp_input</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, udp6.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_input &rArr; ipv6_checksum_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_checksum_calculate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_input
</UL>

<P><STRONG><a name="[37]"></a>well_known_core_callback</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, main.o(i.well_known_core_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = well_known_core_callback &rArr; coap_message_send &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_remote_addr_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_payload_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_opt_uint_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_delete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.coap_endpoints_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[44]"></a>app_coap_time_tick</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.app_coap_time_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = app_coap_time_tick &rArr; notify_all_led3_subscribers &rArr; coap_message_send &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_time_tick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>blink_timeout_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(i.blink_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blink_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>button_event_handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = button_event_handler &rArr; notify_all_led3_subscribers &rArr; coap_message_send &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>coap_endpoints_init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, main.o(i.coap_endpoints_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = coap_endpoints_init &rArr; coap_resource_well_known_generate &rArr; generate_path &rArr;  generate_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_well_known_generate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_create
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_child_add
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>coap_error_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.coap_error_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[df]"></a>connectable_mode_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.connectable_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = connectable_mode_enter &rArr; app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_connectable_mode_enter
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ipv6_medium_evt
</UL>

<P><STRONG><a name="[3b]"></a>iot_timer_tick_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.iot_timer_tick_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iot_timer_tick_callback &rArr; iot_timer_update
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_update
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3e]"></a>ip_app_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(i.ip_app_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ip_app_handler &rArr; icmp6_rs_send &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_rs_send
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[38]"></a>led3_callback</STRONG> (Thumb, 476 bytes, Stack size 104 bytes, main.o(i.led3_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = led3_callback &rArr; notify_all_led3_subscribers &rArr; coap_message_send &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_opt_uint_decode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_unregister
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_search
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_register
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_remote_addr_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_payload_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_opt_uint_add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_opt_present
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_delete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_ct_match_select
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_all_led3_subscribers
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.coap_endpoints_init)
</UL>
<P><STRONG><a name="[7e]"></a>notify_all_led3_subscribers</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, main.o(i.notify_all_led3_subscribers))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = notify_all_led3_subscribers &rArr; coap_message_send &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_next_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_remote_addr_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_payload_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_opt_uint_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_delete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led3_callback
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_coap_time_tick
</UL>

<P><STRONG><a name="[41]"></a>observer_con_message_callback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.observer_con_message_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = observer_con_message_callback &rArr; coap_observe_server_search &rArr; internal_coap_observe_server_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_unregister
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_server_search
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.notify_all_led3_subscribers)
</UL>
<P><STRONG><a name="[3d]"></a>on_ipv6_medium_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.on_ipv6_medium_error))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3c]"></a>on_ipv6_medium_evt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.on_ipv6_medium_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_ipv6_medium_evt &rArr; connectable_mode_enter &rArr; app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[11c]"></a>start_measruing</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, main.o(i.start_measruing))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = start_measruing &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>ble_device_addr_encode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[72]"></a>conn_int_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[6e]"></a>le_role_encode</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ble_advdata.o(i.le_role_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = le_role_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[73]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[75]"></a>name_encode</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[74]"></a>service_data_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[70]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[71]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[135]"></a>uuid_list_sized_encode</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[121]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[11f]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[58]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[59]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[11e]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[64]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>rx_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>rx_done_event</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>tx_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>tx_done_event</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>ack_error</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.ack_error))
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>address_req</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.address_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = address_req &rArr; tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>nrf_drv_twi_int_handler</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.nrf_drv_twi_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_twi_int_handler &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[124]"></a>nrf_twi_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>

<P><STRONG><a name="[49]"></a>on_error</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.on_error))
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>rx_address_req</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.rx_address_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_address_req &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>rx_done</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rx_done &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>rx_prepare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.rx_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>state_machine</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>

<P><STRONG><a name="[123]"></a>twi_clear_bus</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[127]"></a>twi_transfer</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>

<P><STRONG><a name="[47]"></a>tx_done</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done &rArr; tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>tx_prepare</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.tx_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>txrx_shorts_set_task_start</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.txrx_shorts_set_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_prepare
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_address_req
</UL>

<P><STRONG><a name="[129]"></a>nrf_drv_call_event_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_twis.o(i.nrf_drv_call_event_handler))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_state_machine
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_process_error
</UL>

<P><STRONG><a name="[12b]"></a>nrf_drv_twis_check_bit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_twis.o(i.nrf_drv_twis_check_bit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_state_machine
</UL>

<P><STRONG><a name="[12a]"></a>nrf_drv_twis_event_bit_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_twis.o(i.nrf_drv_twis_event_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_state_machine
</UL>

<P><STRONG><a name="[128]"></a>nrf_drv_twis_process_error</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_drv_twis.o(i.nrf_drv_twis_process_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_twis_process_error
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_call_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_state_machine
</UL>

<P><STRONG><a name="[5c]"></a>nrf_drv_twis_state_machine</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, nrf_drv_twis.o(i.nrf_drv_twis_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_twis_state_machine &rArr; nrf_drv_twis_process_error
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_process_error
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_event_bit_get
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twis_check_bit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_call_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>app_error_notify</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, coap.o(i.app_error_notify))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_time_tick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_response
</UL>

<P><STRONG><a name="[e4]"></a>create_response</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, coap.o(i.create_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = create_response &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_remote_addr_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_create
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_response
</UL>

<P><STRONG><a name="[d8]"></a>is_ack</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, coap.o(i.is_ack))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>

<P><STRONG><a name="[da]"></a>is_request</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, coap.o(i.is_request))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>

<P><STRONG><a name="[db]"></a>send_error_response</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, coap.o(i.send_error_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = send_error_response &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_coap_message_send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_response
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>

<P><STRONG><a name="[ac]"></a>content_format_to_bit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, coap_message.o(i.content_format_to_bit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_accept_mask_get
</UL>

<P><STRONG><a name="[af]"></a>decode_option</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, coap_message.o(i.decode_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = decode_option
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_decode
</UL>

<P><STRONG><a name="[b2]"></a>encode_option</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, coap_message.o(i.encode_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_option
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_opt_uint_add
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_message_encode
</UL>

<P><STRONG><a name="[cd]"></a>generate_path</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, coap_resource.o(i.generate_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = generate_path &rArr;  generate_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_path
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_resource_well_known_generate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_path
</UL>

<P><STRONG><a name="[39]"></a>port_data_callback</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, coap_transport_ipv6.o(i.port_data_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = port_data_callback &rArr; coap_transport_read &rArr; send_error_response &rArr; internal_coap_message_send &rArr; coap_transport_write &rArr; udp6_socket_sendto &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_transport_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coap_transport_ipv6.o(i.coap_transport_init)
</UL>
<P><STRONG><a name="[f1]"></a>add_sllao_opt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, icmp6.o(i.add_sllao_opt))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_rs_send
</UL>

<P><STRONG><a name="[e6]"></a>echo_reply_send</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, icmp6.o(i.echo_reply_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = echo_reply_send &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_allocate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_checksum_calculate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_ip_header
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
</UL>

<P><STRONG><a name="[e7]"></a>icmp_ip_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp6.o(i.icmp_ip_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icmp_ip_header
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_header_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_rs_send
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_send
</UL>

<P><STRONG><a name="[ef]"></a>ra_input</STRONG> (Thumb, 310 bytes, Stack size 104 bytes, icmp6.o(i.ra_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ra_input &rArr; ipv6_address_set &rArr; addr_set &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_address_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_address_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_remove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_cid
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
</UL>

<P><STRONG><a name="[f8]"></a>context_find_by_cid</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iot_context_manager.o(i.context_find_by_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = context_find_by_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_update
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_cid
</UL>

<P><STRONG><a name="[e1]"></a>context_find_by_prefix</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, iot_context_manager.o(i.context_find_by_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_addr
</UL>

<P><STRONG><a name="[e3]"></a>context_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iot_context_manager.o(i.context_init))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_remove
</UL>

<P><STRONG><a name="[f6]"></a>context_table_find</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iot_context_manager.o(i.context_table_find))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_addr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_remove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_cid
</UL>

<P><STRONG><a name="[e2]"></a>context_table_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, iot_context_manager.o(i.context_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = context_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_init
</UL>

<P><STRONG><a name="[fd]"></a>pbuffer_allocate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iot_pbuffer.o(i.pbuffer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pbuffer_allocate &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_allocate
</UL>

<P><STRONG><a name="[fe]"></a>pbuffer_find</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iot_pbuffer.o(i.pbuffer_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuffer_find
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_free
</UL>

<P><STRONG><a name="[ff]"></a>pbuffer_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iot_pbuffer.o(i.pbuffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_init
</UL>

<P><STRONG><a name="[fc]"></a>type_offset_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, iot_pbuffer.o(i.type_offset_get))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_allocate
</UL>

<P><STRONG><a name="[6a]"></a>addr_check</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ipv6.o(i.addr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = addr_check &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_evt_handler
</UL>

<P><STRONG><a name="[f4]"></a>addr_free</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ipv6.o(i.addr_free))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_address_remove
</UL>

<P><STRONG><a name="[6c]"></a>addr_set</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ipv6.o(i.addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = addr_set &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_evt_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_address_set
</UL>

<P><STRONG><a name="[3a]"></a>ble_6lowpan_evt_handler</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, ipv6.o(i.ble_6lowpan_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ble_6lowpan_evt_handler &rArr; ipv6_input &rArr; icmp6_input &rArr; echo_reply_send &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_allocate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_input
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_reset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipv6.o(i.ipv6_init)
</UL>
<P><STRONG><a name="[8c]"></a>interface_reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ipv6.o(i.interface_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interface_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_evt_handler
</UL>

<P><STRONG><a name="[8f]"></a>ipv6_input</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ipv6.o(i.ipv6_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ipv6_input &rArr; icmp6_input &rArr; echo_reply_send &rArr; ipv6_send &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_pbuffer_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_evt_handler
</UL>

<P><STRONG><a name="[35]"></a>ble_evt_dispatch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipv6_medium_ble.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ble_evt_dispatch &rArr; on_ble_evt &rArr; ble_ipsp_evt_handler &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipv6_medium_ble.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[9d]"></a>ble_stack_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ipv6_medium_ble.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_stack_init &rArr; softdevice_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[ea]"></a>gap_params_apply</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ipv6_medium_ble.o(i.gap_params_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gap_params_apply &rArr; app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[eb]"></a>gap_params_set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ipv6_medium_ble.o(i.gap_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[97]"></a>on_ble_evt</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ipv6_medium_ble.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = on_ble_evt &rArr; ble_ipsp_evt_handler &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[36]"></a>sys_evt_dispatch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6_medium_ble.o(i.sys_evt_dispatch))
<BR>[Address Reference Count : 1]<UL><LI> ipv6_medium_ble.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[133]"></a>udp_socket_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, udp6.o(i.udp_socket_init))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp6_socket_free
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
</UL>

<P><STRONG><a name="[33]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = detection_delay_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[32]"></a>gpiote_event_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[82]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[84]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[88]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[83]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[de]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[130]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[131]"></a>list_deletions_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_deletions_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[112]"></a>list_insertions_handler</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[81]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[5d]"></a>timer_list_handler</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[5a]"></a>timer_timeouts_check</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_timeouts_check &rArr; app_error_handler &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>user_id_get</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[87]"></a>user_op_alloc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[12c]"></a>block_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mem_manager.o(i.block_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_init
</UL>

<P><STRONG><a name="[ed]"></a>get_block_cat</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, mem_manager.o(i.get_block_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_block_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_size
</UL>

<P><STRONG><a name="[ec]"></a>get_block_size</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mem_manager.o(i.get_block_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
</UL>

<P><STRONG><a name="[91]"></a>instance_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_6lowpan.o(i.instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[f3]"></a>interface_add</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_6lowpan.o(i.interface_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interface_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[103]"></a>iphc_decode</STRONG> (Thumb, 972 bytes, Stack size 64 bytes, ble_6lowpan.o(i.iphc_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iphc_decode &rArr; iot_context_manager_get_by_cid &rArr; context_find_by_cid
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_cid
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_nhc_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[94]"></a>iphc_encode</STRONG> (Thumb, 1120 bytes, Stack size 120 bytes, ble_6lowpan.o(i.iphc_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_addr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_context_cover_iid
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_nhc_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_interface_send
</UL>

<P><STRONG><a name="[104]"></a>iphc_nhc_decode</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ble_6lowpan.o(i.iphc_nhc_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iphc_nhc_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
</UL>

<P><STRONG><a name="[106]"></a>iphc_nhc_encode</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ble_6lowpan.o(i.iphc_nhc_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iphc_nhc_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
</UL>

<P><STRONG><a name="[34]"></a>ipsp_evt_handler</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, ble_6lowpan.o(i.ipsp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ipsp_evt_handler &rArr; iphc_decode &rArr; iot_context_manager_get_by_cid &rArr; context_find_by_cid
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_disconnect
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_complete
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_add
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_6lowpan.o(i.ble_6lowpan_init)
</UL>
<P><STRONG><a name="[105]"></a>is_context_cover_iid</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_6lowpan.o(i.is_context_cover_iid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = is_context_cover_iid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
</UL>

<P><STRONG><a name="[107]"></a>tx_complete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_6lowpan.o(i.tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tx_complete &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[95]"></a>tx_send</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_6lowpan.o(i.tx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tx_send &rArr; tx_complete &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_interface_send
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[9b]"></a>channel_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_ipsp.o(i.channel_init))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_evt_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_init
</UL>

<P><STRONG><a name="[99]"></a>channel_search</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ble_ipsp.o(i.channel_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = channel_search
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_evt_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_disconnect
</UL>

<P><STRONG><a name="[68]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>

<P><STRONG><a name="[31]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf3.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0sprintf$3)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
