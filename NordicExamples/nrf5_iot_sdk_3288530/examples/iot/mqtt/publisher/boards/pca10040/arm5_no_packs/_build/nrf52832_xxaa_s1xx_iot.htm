<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa_s1xx_iot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa_s1xx_iot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Feb 16 13:20:37 2016
<BR><P>
<H3>Maximum Stack Usage =       3256 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[b1]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b1]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[29c]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29c]">x509_crt_verify_child</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI2_EGU2_IRQHandler</a> from softdevice_handler.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[18]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[47]">add_one_and_zeros_padding</a> from cipher.o(i.add_one_and_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[49]">add_zeros_and_len_padding</a> from cipher.o(i.add_zeros_and_len_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[4b]">add_zeros_padding</a> from cipher.o(i.add_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[6e]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(i.aes_crypt_cbc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[6d]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(i.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[71]">aes_ctx_alloc</a> from cipher_wrap.o(i.aes_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[72]">aes_ctx_free</a> from cipher_wrap.o(i.aes_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[70]">aes_setkey_dec_wrap</a> from cipher_wrap.o(i.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[6f]">aes_setkey_enc_wrap</a> from cipher_wrap.o(i.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[3d]">app_mqtt_evt_handler</a> from main.o(i.app_mqtt_evt_handler) referenced from main.o(i.button_event_handler)
 <LI><a href="#[39]">ble_evt_dispatch</a> from ipv6_medium_ble.o(i.ble_evt_dispatch) referenced from ipv6_medium_ble.o(i.ble_stack_init)
 <LI><a href="#[3b]">blenetif_init</a> from nrf_platform_port.o(i.blenetif_init) referenced from nrf_platform_port.o(i.blenetif_transport_callback)
 <LI><a href="#[3c]">blenetif_output</a> from nrf_platform_port.o(i.blenetif_output) referenced from nrf_platform_port.o(i.blenetif_transport_callback)
 <LI><a href="#[57]">blenetif_transport_callback</a> from nrf_platform_port.o(i.blenetif_transport_callback) referenced from nrf_platform_port.o(i.nrf_driver_init)
 <LI><a href="#[63]">blink_timeout_handler</a> from main.o(i.blink_timeout_handler) referenced from main.o(.constdata)
 <LI><a href="#[0]">button_event_handler</a> from main.o(i.button_event_handler) referenced 6 times from main.o(.data)
 <LI><a href="#[35]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[ad]">ecdsa_alloc_wrap</a> from pk_wrap.o(i.ecdsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[aa]">ecdsa_can_do</a> from pk_wrap.o(i.ecdsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ae]">ecdsa_free_wrap</a> from pk_wrap.o(i.ecdsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ac]">ecdsa_sign_wrap</a> from pk_wrap.o(i.ecdsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ab]">ecdsa_verify_wrap</a> from pk_wrap.o(i.ecdsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a6]">eckey_alloc_wrap</a> from pk_wrap.o(i.eckey_alloc_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[a2]">eckey_can_do</a> from pk_wrap.o(i.eckey_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a5]">eckey_check_pair</a> from pk_wrap.o(i.eckey_check_pair) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[a8]">eckey_debug</a> from pk_wrap.o(i.eckey_debug) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[a7]">eckey_free_wrap</a> from pk_wrap.o(i.eckey_free_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[a1]">eckey_get_bitlen</a> from pk_wrap.o(i.eckey_get_bitlen) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[a4]">eckey_sign_wrap</a> from pk_wrap.o(i.eckey_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a3]">eckey_verify_wrap</a> from pk_wrap.o(i.eckey_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a9]">eckeydh_can_do</a> from pk_wrap.o(i.eckeydh_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[4e]">ecp_mod_p256</a> from ecp_curves.o(i.ecp_mod_p256) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[33]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4d]">get_no_padding</a> from cipher.o(i.get_no_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[48]">get_one_and_zeros_padding</a> from cipher.o(i.get_one_and_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[4a]">get_zeros_and_len_padding</a> from cipher.o(i.get_zeros_and_len_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[4c]">get_zeros_padding</a> from cipher.o(i.get_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[34]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[40]">interface_transport_read</a> from tls_interface.o(i.interface_transport_read) referenced from tls_interface.o(i.interface_ssl_context_setup)
 <LI><a href="#[41]">interface_transport_write</a> from tls_interface.o(i.interface_transport_write) referenced from tls_interface.o(i.interface_ssl_context_setup)
 <LI><a href="#[44]">iot_timer_tick_callback</a> from main.o(i.iot_timer_tick_callback) referenced from main.o(i.main)
 <LI><a href="#[38]">ipsp_evt_handler</a> from ble_6lowpan.o(i.ipsp_evt_handler) referenced from ble_6lowpan.o(i.ble_6lowpan_init)
 <LI><a href="#[30]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3f]">mbedtls_log</a> from tls_interface.o(i.mbedtls_log) referenced from tls_interface.o(i.interface_conf_setup)
 <LI><a href="#[76]">mbedtls_md5</a> from md5.o(i.mbedtls_md5) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7e]">mbedtls_sha1</a> from sha1.o(i.mbedtls_sha1) referenced from md_wrap.o(.constdata)
 <LI><a href="#[79]">md5_clone_wrap</a> from md_wrap.o(i.md5_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[77]">md5_ctx_alloc</a> from md_wrap.o(i.md5_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[78]">md5_ctx_free</a> from md_wrap.o(i.md5_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[75]">md5_finish_wrap</a> from md_wrap.o(i.md5_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7a]">md5_process_wrap</a> from md_wrap.o(i.md5_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[73]">md5_starts_wrap</a> from md_wrap.o(i.md5_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[74]">md5_update_wrap</a> from md_wrap.o(i.md5_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[53]">mld6_timer</a> from timers.o(i.mld6_timer) referenced from timers.o(i.mld6_timer)
 <LI><a href="#[53]">mld6_timer</a> from timers.o(i.mld6_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[64]">mqtt_client_tcp_connect</a> from mqtt_transport.o(i.mqtt_client_tcp_connect) referenced from mqtt.o(.constdata)
 <LI><a href="#[67]">mqtt_client_tcp_disconnect</a> from mqtt_transport.o(i.mqtt_client_tcp_disconnect) referenced from mqtt.o(.constdata)
 <LI><a href="#[66]">mqtt_client_tcp_read</a> from mqtt_transport.o(i.mqtt_client_tcp_read) referenced from mqtt.o(.constdata)
 <LI><a href="#[65]">mqtt_client_tcp_write</a> from mqtt_transport.o(i.mqtt_client_tcp_write) referenced from mqtt.o(.constdata)
 <LI><a href="#[68]">mqtt_client_tls_connect</a> from mqtt_transport.o(i.mqtt_client_tls_connect) referenced from mqtt.o(.constdata)
 <LI><a href="#[6b]">mqtt_client_tls_disconnect</a> from mqtt_transport.o(i.mqtt_client_tls_disconnect) referenced from mqtt.o(.constdata)
 <LI><a href="#[6c]">mqtt_client_tls_output_handler</a> from mqtt_transport.o(i.mqtt_client_tls_output_handler) referenced from mqtt_transport.o(.constdata)
 <LI><a href="#[6a]">mqtt_client_tls_read</a> from mqtt_transport.o(i.mqtt_client_tls_read) referenced from mqtt.o(.constdata)
 <LI><a href="#[69]">mqtt_client_tls_write</a> from mqtt_transport.o(i.mqtt_client_tls_write) referenced from mqtt.o(.constdata)
 <LI><a href="#[55]">nd6_timer</a> from timers.o(i.nd6_timer) referenced from timers.o(i.nd6_timer)
 <LI><a href="#[55]">nd6_timer</a> from timers.o(i.nd6_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[56]">netif_null_output_ip6</a> from netif.o(i.netif_null_output_ip6) referenced from netif.o(i.netif_add)
 <LI><a href="#[58]">nrf_free</a> from mem_manager.o(i.nrf_free) referenced from tls_interface.o(i.nrf_tls_init)
 <LI><a href="#[46]">on_ipv6_medium_error</a> from main.o(i.on_ipv6_medium_error) referenced from main.o(i.main)
 <LI><a href="#[45]">on_ipv6_medium_evt</a> from main.o(i.on_ipv6_medium_evt) referenced from main.o(i.main)
 <LI><a href="#[1]">platform_calloc_uninit</a> from platform.o(i.platform_calloc_uninit) referenced 2 times from platform.o(.data)
 <LI><a href="#[2]">platform_free_uninit</a> from platform.o(i.platform_free_uninit) referenced 2 times from platform.o(.data)
 <LI><a href="#[3e]">random_vector_generate</a> from tls_interface.o(i.random_vector_generate) referenced from tls_interface.o(i.interface_conf_setup)
 <LI><a href="#[5d]">recv_callback</a> from mqtt_transport.o(i.recv_callback) referenced from mqtt_transport.o(i.tcp_connection_callback)
 <LI><a href="#[9e]">rsa_alloc_wrap</a> from pk_wrap.o(i.rsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[98]">rsa_can_do</a> from pk_wrap.o(i.rsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9d]">rsa_check_pair_wrap</a> from pk_wrap.o(i.rsa_check_pair_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[a0]">rsa_debug</a> from pk_wrap.o(i.rsa_debug) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9b]">rsa_decrypt_wrap</a> from pk_wrap.o(i.rsa_decrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9c]">rsa_encrypt_wrap</a> from pk_wrap.o(i.rsa_encrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9f]">rsa_free_wrap</a> from pk_wrap.o(i.rsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[97]">rsa_get_bitlen</a> from pk_wrap.o(i.rsa_get_bitlen) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9a]">rsa_sign_wrap</a> from pk_wrap.o(i.rsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[99]">rsa_verify_wrap</a> from pk_wrap.o(i.rsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[81]">sha1_clone_wrap</a> from md_wrap.o(i.sha1_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7f]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[80]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7d]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[82]">sha1_process_wrap</a> from md_wrap.o(i.sha1_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7b]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[7c]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[89]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[87]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[88]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[85]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[8a]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[83]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[84]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[86]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[8b]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[8c]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[93]">sha384_clone_wrap</a> from md_wrap.o(i.sha384_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[91]">sha384_ctx_alloc</a> from md_wrap.o(i.sha384_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[92]">sha384_ctx_free</a> from md_wrap.o(i.sha384_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[8f]">sha384_finish_wrap</a> from md_wrap.o(i.sha384_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[94]">sha384_process_wrap</a> from md_wrap.o(i.sha384_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[8d]">sha384_starts_wrap</a> from md_wrap.o(i.sha384_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[8e]">sha384_update_wrap</a> from md_wrap.o(i.sha384_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[90]">sha384_wrap</a> from md_wrap.o(i.sha384_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[95]">sha512_starts_wrap</a> from md_wrap.o(i.sha512_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[96]">sha512_wrap</a> from md_wrap.o(i.sha512_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[5a]">softdevice_assertion_handler</a> from softdevice_handler.o(i.softdevice_assertion_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[51]">ssl_calc_finished_tls</a> from ssl_tls.o(i.ssl_calc_finished_tls) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[50]">ssl_calc_verify_tls</a> from ssl_tls.o(i.ssl_calc_verify_tls) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[52]">ssl_update_checksum_md5sha1</a> from ssl_tls.o(i.ssl_update_checksum_md5sha1) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[5b]">ssl_update_checksum_start</a> from ssl_tls.o(i.ssl_update_checksum_start) referenced from ssl_tls.o(i.ssl_handshake_init)
 <LI><a href="#[3a]">sys_evt_dispatch</a> from ipv6_medium_ble.o(i.sys_evt_dispatch) referenced from ipv6_medium_ble.o(i.ble_stack_init)
 <LI><a href="#[62]">system_timer_callback</a> from main.o(i.system_timer_callback) referenced from main.o(.constdata)
 <LI><a href="#[5e]">tcp_connection_callback</a> from mqtt_transport.o(i.tcp_connection_callback) referenced from mqtt_transport.o(i.tcp_request_connection)
 <LI><a href="#[60]">tcp_connection_poll</a> from mqtt_transport.o(i.tcp_connection_poll) referenced from mqtt_transport.o(i.tcp_request_connection)
 <LI><a href="#[5f]">tcp_error_handler</a> from mqtt_transport.o(i.tcp_error_handler) referenced from mqtt_transport.o(i.tcp_request_connection)
 <LI><a href="#[5c]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[54]">tcp_write_complete_cb</a> from mqtt_transport.o(i.tcp_write_complete_cb) referenced from mqtt_transport.o(i.mqtt_client_tcp_write)
 <LI><a href="#[61]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcp_timer_needed)
 <LI><a href="#[61]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcpip_tcp_timer)
 <LI><a href="#[4f]">tls1_prf</a> from ssl_tls.o(i.tls1_prf) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[42]">tls_get_timer</a> from tls_interface.o(i.tls_get_timer) referenced from tls_interface.o(i.interface_ssl_context_setup)
 <LI><a href="#[43]">tls_set_timer</a> from tls_interface.o(i.tls_set_timer) referenced from tls_interface.o(i.interface_ssl_context_setup)
 <LI><a href="#[36]">uart_error_handle</a> from app_trace.o(i.uart_error_handle) referenced from app_trace.o(i.app_trace_init)
 <LI><a href="#[37]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[59]">wrapper_calloc</a> from tls_interface.o(i.wrapper_calloc) referenced from tls_interface.o(i.nrf_tls_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[34f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[af]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[350]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[351]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[352]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[353]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[354]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b1]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[355]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_rs
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_ns
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_na
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_output
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_utf8_str
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_bin_str
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_psk
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[356]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[358]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_request_encode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_calloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_params_set
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_add
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_alloc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[35a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[21f]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[e5]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>

<P><STRONG><a name="[ed]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mqtt_publish
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[131]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_find_by_prefix
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_context_cover_iid
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[35b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[35c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[35d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[360]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[d6]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_connectable_mode_enter
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_driver_interface_up
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_driver_interface_down
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mqtt_evt_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ipv6_medium_evt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mqtt_publish
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_params_set
</UL>

<P><STRONG><a name="[361]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[362]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[363]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[cc]"></a>adv_data_encode</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_role_encode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[de]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>app_button_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>app_error_handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_eui64_get
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_stack_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_tick_callback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_apply
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handle
</UL>

<P><STRONG><a name="[e6]"></a>app_fifo_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[fb]"></a>app_fifo_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_alloc
</UL>

<P><STRONG><a name="[e8]"></a>app_fifo_put</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[ea]"></a>app_fifo_read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, app_fifo.o(i.app_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_read
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_transport_read
</UL>

<P><STRONG><a name="[eb]"></a>app_fifo_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_fifo.o(i.app_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_input
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_continue
</UL>

<P><STRONG><a name="[3d]"></a>app_mqtt_evt_handler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, main.o(i.app_mqtt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_mqtt_evt_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.button_event_handler)
</UL>
<P><STRONG><a name="[307]"></a>app_timer_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>

<P><STRONG><a name="[e4]"></a>app_timer_create</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>app_timer_init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>app_timer_start</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[f8]"></a>app_timer_stop</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[f9]"></a>app_trace_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, app_trace.o(i.app_trace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = app_trace_init &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>app_uart_init</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_init
</UL>

<P><STRONG><a name="[100]"></a>app_uart_put</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[105]"></a>ble_6lowpan_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ble_6lowpan.o(i.ble_6lowpan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_6lowpan_init &rArr; ble_ipsp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_driver_init
</UL>

<P><STRONG><a name="[108]"></a>ble_6lowpan_interface_send</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ble_6lowpan.o(i.ble_6lowpan_interface_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_output
</UL>

<P><STRONG><a name="[10b]"></a>ble_advdata_set</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[10d]"></a>ble_ipsp_disconnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_ipsp.o(i.ble_ipsp_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_ipsp_disconnect &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_search
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[10f]"></a>ble_ipsp_evt_handler</STRONG> (Thumb, 744 bytes, Stack size 104 bytes, ble_ipsp.o(i.ble_ipsp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_ipsp_evt_handler &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_search
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[107]"></a>ble_ipsp_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_ipsp.o(i.ble_ipsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_ipsp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_init
</UL>

<P><STRONG><a name="[111]"></a>ble_ipsp_send</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_ipsp.o(i.ble_ipsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_ipsp_send &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_search
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
</UL>

<P><STRONG><a name="[125]"></a>client_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mqtt.o(i.client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = client_init &rArr; nrf_tls_free &rArr; interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_disconnection
</UL>

<P><STRONG><a name="[128]"></a>connect_request_encode</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, mqtt_encoder.o(i.connect_request_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = connect_request_encode &rArr; mqtt_encode_fixed_header &rArr; packet_length_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_len_str_encode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_utf8_str
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_uint8
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_uint16
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_encode_fixed_header
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_connect
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_connect
</UL>

<P><STRONG><a name="[33]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[172]"></a>icmp6_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp6.o(i.icmp6_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = icmp6_dest_unreach &rArr; icmp6_send_response &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[174]"></a>icmp6_input</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, icmp6.o(i.icmp6_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = icmp6_input &rArr; nd6_input &rArr; mld6_leavegroup &rArr; mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_input
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
</UL>

<P><STRONG><a name="[17a]"></a>icmp6_param_problem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icmp6.o(i.icmp6_param_problem))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = icmp6_param_problem &rArr; icmp6_send_response &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
</UL>

<P><STRONG><a name="[341]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[17e]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[181]"></a>inet_chksum_pseudo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[183]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pseudo_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = inet_chksum_pseudo_partial &rArr; inet_cksum_pseudo_partial_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[c0]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>iot_context_manager_get_by_addr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iot_context_manager.o(i.iot_context_manager_get_by_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_find_by_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
</UL>

<P><STRONG><a name="[1a1]"></a>iot_context_manager_get_by_cid</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iot_context_manager.o(i.iot_context_manager_get_by_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iot_context_manager_get_by_cid &rArr; context_find_by_cid
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_find_by_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
</UL>

<P><STRONG><a name="[1a3]"></a>iot_context_manager_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iot_context_manager.o(i.iot_context_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iot_context_manager_init &rArr; context_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_driver_init
</UL>

<P><STRONG><a name="[11c]"></a>iot_context_manager_table_alloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, iot_context_manager.o(i.iot_context_manager_table_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iot_context_manager_table_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
</UL>

<P><STRONG><a name="[120]"></a>iot_context_manager_table_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iot_context_manager.o(i.iot_context_manager_table_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iot_context_manager_table_free &rArr; context_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_find
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
</UL>

<P><STRONG><a name="[1cb]"></a>iot_timer_client_list_set</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, iot_timer.o(i.iot_timer_client_list_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iot_timer_client_list_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>iot_timer_update</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, iot_timer.o(i.iot_timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iot_timer_update
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_tick_callback
</UL>

<P><STRONG><a name="[2c6]"></a>iot_timer_wall_clock_delta_get</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, iot_timer.o(i.iot_timer_wall_clock_delta_get))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_live
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_timer
</UL>

<P><STRONG><a name="[2b8]"></a>iot_timer_wall_clock_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iot_timer.o(i.iot_timer_wall_clock_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_handle_rx_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_timer
</UL>

<P><STRONG><a name="[320]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ip4_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[175]"></a>ip6_chksum_pseudo</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, inet_chksum.o(i.ip6_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ip6_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_rs
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_ns
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_na
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[1a5]"></a>ip6_chksum_pseudo_partial</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, inet_chksum.o(i.ip6_chksum_pseudo_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ip6_chksum_pseudo_partial &rArr; inet_cksum_pseudo_partial_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[11a]"></a>ip6_input</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, ip6.o(i.ip6_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = ip6_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_lookfor_group
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_param_problem
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
</UL>

<P><STRONG><a name="[1ad]"></a>ip6_options_add_hbh_ra</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ip6.o(i.ip6_options_add_hbh_ra))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip6_options_add_hbh_ra &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
</UL>

<P><STRONG><a name="[1ae]"></a>ip6_output</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, ip6.o(i.ip6_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ip6_output &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_route
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
</UL>

<P><STRONG><a name="[1af]"></a>ip6_output_hinted</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, ip6.o(i.ip6_output_hinted))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_route
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[179]"></a>ip6_output_if</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, ip6.o(i.ip6_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if_src
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_select_source_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_rs
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_ns
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_na
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_hinted
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
</UL>

<P><STRONG><a name="[1b0]"></a>ip6_output_if_src</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, ip6.o(i.ip6_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
</UL>

<P><STRONG><a name="[17c]"></a>ip6_route</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, ip6.o(i.ip6_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ip6_route &rArr; nd6_select_router
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_select_router
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_hinted
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[17b]"></a>ip6_select_source_address</STRONG> (Thumb, 384 bytes, Stack size 28 bytes, ip6.o(i.ip6_select_source_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip6_select_source_address
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[17f]"></a>ip_output</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, ip4.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
</UL>

<P><STRONG><a name="[1b5]"></a>ip_output_hinted</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, ip4.o(i.ip_output_hinted))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ip_output_hinted &rArr; ip_output_if &rArr; ip_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[1b4]"></a>ip_output_if</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ip4.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ip_output_if &rArr; ip_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[1b6]"></a>ip_output_if_src</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ip4.o(i.ip_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ip_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[1b3]"></a>ip_route</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ip4.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[12f]"></a>ipv6_medium_connectable_mode_enter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipv6_medium_ble.o(i.ipv6_medium_connectable_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv6_medium_connectable_mode_enter &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
</UL>

<P><STRONG><a name="[1cc]"></a>ipv6_medium_eui48_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ipv6_medium_ble.o(i.ipv6_medium_eui48_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6_medium_eui48_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cd]"></a>ipv6_medium_eui48_set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipv6_medium_ble.o(i.ipv6_medium_eui48_set))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>ipv6_medium_eui64_get</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ipv6_medium_ble.o(i.ipv6_medium_eui64_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipv6_medium_eui64_get &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_stack_init
</UL>

<P><STRONG><a name="[1c3]"></a>ipv6_medium_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ipv6_medium_ble.o(i.ipv6_medium_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ipv6_medium_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_apply
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_params_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>lwip_chksum_copy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, inet_chksum.o(i.lwip_chksum_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lwip_chksum_copy &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[1b1]"></a>lwip_htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if_src
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[185]"></a>lwip_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if_src
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_src
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[1ba]"></a>lwip_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_stack_init
</UL>

<P><STRONG><a name="[1a6]"></a>lwip_ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[1a7]"></a>lwip_ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[180]"></a>lwip_standard_chksum</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = main &rArr; ipv6_medium_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_eui48_set
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_eui48_get
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_client_list_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_stack_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d8]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, aes.o(i.mbedtls_aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[d9]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_encrypt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[1ce]"></a>mbedtls_aes_decrypt</STRONG> (Thumb, 956 bytes, Stack size 40 bytes, aes.o(i.mbedtls_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[1cf]"></a>mbedtls_aes_encrypt</STRONG> (Thumb, 954 bytes, Stack size 40 bytes, aes.o(i.mbedtls_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[db]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[da]"></a>mbedtls_aes_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[dc]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 198 bytes, Stack size 320 bytes, aes.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[dd]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 408 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[1d0]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>

<P><STRONG><a name="[1d4]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[1d5]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
</UL>

<P><STRONG><a name="[1d6]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[1d7]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[1d3]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[1d8]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[1d9]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_sequence_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[1d1]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, asn1parse.o(i.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[13f]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, asn1write.o(i.mbedtls_asn1_write_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[13e]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, asn1write.o(i.mbedtls_asn1_write_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[140]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asn1write.o(i.mbedtls_asn1_write_tag))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[220]"></a>mbedtls_base64_decode</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, base64.o(i.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[1dc]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[1e0]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[28d]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[262]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[1e2]"></a>mbedtls_cipher_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[1de]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[1dd]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[1e4]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_set_padding_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[264]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[1e3]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[1df]"></a>mbedtls_cipher_update</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, cipher.o(i.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[1e5]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_calc_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[1e6]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, ecdh.o(i.mbedtls_ecdh_compute_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[1ea]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[1ec]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ecdh.o(i.mbedtls_ecdh_gen_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[1ee]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ecdh.o(i.mbedtls_ecdh_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[1ef]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ecdh.o(i.mbedtls_ecdh_make_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[1f1]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ecdh.o(i.mbedtls_ecdh_read_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[13b]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecdsa.o(i.mbedtls_ecdsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
</UL>

<P><STRONG><a name="[145]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ecdsa.o(i.mbedtls_ecdsa_from_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>

<P><STRONG><a name="[13a]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecdsa.o(i.mbedtls_ecdsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
</UL>

<P><STRONG><a name="[141]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, ecdsa.o(i.mbedtls_ecdsa_read_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[1f6]"></a>mbedtls_ecdsa_sign</STRONG> (Thumb, 362 bytes, Stack size 128 bytes, ecdsa.o(i.mbedtls_ecdsa_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[1f5]"></a>mbedtls_ecdsa_verify</STRONG> (Thumb, 306 bytes, Stack size 136 bytes, ecdsa.o(i.mbedtls_ecdsa_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[13c]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, ecdsa.o(i.mbedtls_ecdsa_write_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>

<P><STRONG><a name="[1f8]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[143]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 172 bytes, Stack size 200 bytes, ecp.o(i.mbedtls_ecp_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[1e7]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[148]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[300]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_grp_id))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[200]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_tls_id))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[1ed]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_gen_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[1fb]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 140 bytes, Stack size 120 bytes, ecp.o(i.mbedtls_ecp_gen_keypair_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[1f4]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_group_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[1eb]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[1fa]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>

<P><STRONG><a name="[1fc]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, ecp_curves.o(i.mbedtls_ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_ecp_group_load &rArr; ecp_group_load
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[25f]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_grp_id_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[1e9]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[144]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[142]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
</UL>

<P><STRONG><a name="[1e8]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[1f7]"></a>mbedtls_ecp_muladd</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, ecp.o(i.mbedtls_ecp_muladd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[165]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[166]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[1fe]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_point_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[1ff]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ecp.o(i.mbedtls_ecp_point_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[14d]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_set_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[1f2]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_tls_read_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[1f3]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_tls_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[1f0]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_tls_write_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[34a]"></a>mbedtls_md</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, md.o(i.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[76]"></a>mbedtls_md5</STRONG> (Thumb, 50 bytes, Stack size 104 bytes, md5.o(i.mbedtls_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_md5 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>mbedtls_md5_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_clone_wrap
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[204]"></a>mbedtls_md5_finish</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, md5.o(i.mbedtls_md5_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish_wrap
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[205]"></a>mbedtls_md5_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_free))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[201]"></a>mbedtls_md5_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[207]"></a>mbedtls_md5_process</STRONG> (Thumb, 1782 bytes, Stack size 88 bytes, md5.o(i.mbedtls_md5_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process_wrap
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>

<P><STRONG><a name="[202]"></a>mbedtls_md5_starts</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_starts))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts_wrap
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[203]"></a>mbedtls_md5_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, md5.o(i.mbedtls_md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update_wrap
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_md5sha1
</UL>

<P><STRONG><a name="[304]"></a>mbedtls_md_finish</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[208]"></a>mbedtls_md_free</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[245]"></a>mbedtls_md_get_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[2f6]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 84 bytes, Stack size 80 bytes, md.o(i.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[2f7]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[20a]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, md.o(i.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[2f5]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[243]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[2f9]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[25e]"></a>mbedtls_md_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_list))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[2f8]"></a>mbedtls_md_process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[263]"></a>mbedtls_md_setup</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[302]"></a>mbedtls_md_starts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[303]"></a>mbedtls_md_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[20b]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>

<P><STRONG><a name="[14c]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[15a]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[20c]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>

<P><STRONG><a name="[147]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[137]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[151]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</UL>

<P><STRONG><a name="[20d]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 792 bytes, Stack size 144 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[20e]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1084 bytes, Stack size 1680 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[16d]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 52 bytes, Stack size 1040 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[152]"></a>mbedtls_mpi_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[212]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[156]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
</UL>

<P><STRONG><a name="[15b]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>

<P><STRONG><a name="[149]"></a>mbedtls_mpi_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[16a]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 616 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[213]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[168]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</UL>

<P><STRONG><a name="[15e]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[14f]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[14a]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[135]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[161]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_safe_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[157]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[136]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</UL>

<P><STRONG><a name="[16c]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[1da]"></a>mbedtls_mpi_size</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_mpi_size
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[150]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>

<P><STRONG><a name="[154]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[138]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1db]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[216]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[217]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_md_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>

<P><STRONG><a name="[244]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_oid_by_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[218]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[219]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[21b]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_x509_ext_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[21c]"></a>mbedtls_pem_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pem.o(i.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[222]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(i.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[21e]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 578 bytes, Stack size 112 bytes, pem.o(i.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[232]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_can_do))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>

<P><STRONG><a name="[226]"></a>mbedtls_pk_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[34e]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_bitlen))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
</UL>

<P><STRONG><a name="[298]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[223]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[191]"></a>mbedtls_pk_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_init))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[192]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, pkparse.o(i.mbedtls_pk_parse_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[229]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, pkparse.o(i.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[224]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[22e]"></a>mbedtls_pk_sign</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[230]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[231]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[2eb]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform.o(i.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_init
</UL>

<P><STRONG><a name="[233]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 488 bytes, Stack size 192 bytes, rsa.o(i.mbedtls_rsa_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[235]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[234]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[236]"></a>mbedtls_rsa_free</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[237]"></a>mbedtls_rsa_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[238]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[23a]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rsa.o(i.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[23c]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[23e]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[240]"></a>mbedtls_rsa_private</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>

<P><STRONG><a name="[242]"></a>mbedtls_rsa_public</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>

<P><STRONG><a name="[239]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 254 bytes, Stack size 1064 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[23b]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[23d]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[23f]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 410 bytes, Stack size 1096 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[7e]"></a>mbedtls_sha1</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, sha1.o(i.mbedtls_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[24b]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[249]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[24a]"></a>mbedtls_sha1_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_free))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[246]"></a>mbedtls_sha1_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[24c]"></a>mbedtls_sha1_process</STRONG> (Thumb, 4670 bytes, Stack size 144 bytes, sha1.o(i.mbedtls_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[247]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_starts))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[248]"></a>mbedtls_sha1_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_md5sha1
</UL>

<P><STRONG><a name="[24d]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(i.mbedtls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[253]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
</UL>

<P><STRONG><a name="[251]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
</UL>

<P><STRONG><a name="[252]"></a>mbedtls_sha256_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
</UL>

<P><STRONG><a name="[24e]"></a>mbedtls_sha256_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
</UL>

<P><STRONG><a name="[254]"></a>mbedtls_sha256_process</STRONG> (Thumb, 2106 bytes, Stack size 324 bytes, sha256.o(i.mbedtls_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[24f]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
</UL>

<P><STRONG><a name="[250]"></a>mbedtls_sha256_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
</UL>

<P><STRONG><a name="[255]"></a>mbedtls_sha512</STRONG> (Thumb, 54 bytes, Stack size 240 bytes, sha512.o(i.mbedtls_sha512))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_wrap
</UL>

<P><STRONG><a name="[25b]"></a>mbedtls_sha512_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_clone_wrap
</UL>

<P><STRONG><a name="[259]"></a>mbedtls_sha512_finish</STRONG> (Thumb, 764 bytes, Stack size 40 bytes, sha512.o(i.mbedtls_sha512_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
</UL>

<P><STRONG><a name="[25a]"></a>mbedtls_sha512_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_free))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
</UL>

<P><STRONG><a name="[256]"></a>mbedtls_sha512_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
</UL>

<P><STRONG><a name="[25c]"></a>mbedtls_sha512_process</STRONG> (Thumb, 2546 bytes, Stack size 840 bytes, sha512.o(i.mbedtls_sha512_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mbedtls_sha512_process
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_process_wrap
</UL>

<P><STRONG><a name="[257]"></a>mbedtls_sha512_starts</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_starts))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
</UL>

<P><STRONG><a name="[258]"></a>mbedtls_sha512_update</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, sha512.o(i.mbedtls_sha512_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
</UL>

<P><STRONG><a name="[27c]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_curve))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[2fe]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_from_id))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[343]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_authmode))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_options_set
</UL>

<P><STRONG><a name="[344]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_ca_chain))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_options_set
</UL>

<P><STRONG><a name="[18d]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_dbg))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[193]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_conf_own_cert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_conf_own_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[18e]"></a>mbedtls_ssl_conf_psk</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_conf_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ssl_conf_psk &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[18c]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_rng))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[18b]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ecp_grp_id_list
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_list
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[197]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_config_free
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_free
</UL>

<P><STRONG><a name="[18a]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_config_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[261]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 576 bytes, Stack size 376 bytes, ssl_tls.o(i.mbedtls_ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; tls1_prf &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[285]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_fetch_input
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[26a]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[198]"></a>mbedtls_ssl_free</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_free
</UL>

<P><STRONG><a name="[301]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_sig_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[28f]"></a>mbedtls_ssl_get_max_frag_len</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_max_frag_len))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[19e]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_ssl_context_setup
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>

<P><STRONG><a name="[269]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, ssl_cli.o(i.mbedtls_ssl_handshake_client_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[266]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[268]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[278]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_wrapup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[19a]"></a>mbedtls_ssl_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_ssl_context_setup
</UL>

<P><STRONG><a name="[25d]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_list_ciphersuites))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[2ff]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_optimize_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[26d]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_parse_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[276]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[277]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[27e]"></a>mbedtls_ssl_psk_derive_premaster</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_psk_derive_premaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ssl_psk_derive_premaster &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[196]"></a>mbedtls_ssl_read</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_continue
</UL>

<P><STRONG><a name="[270]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_ssl_read_record &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_handshake_record
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[2fd]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_read_version))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[288]"></a>mbedtls_ssl_renegotiate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[282]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_send_alert_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[28a]"></a>mbedtls_ssl_send_fatal_handshake_failure</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_send_fatal_handshake_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_ssl_send_fatal_handshake_failure &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[267]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_session_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[28b]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_session_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[19c]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_ssl_context_setup
</UL>

<P><STRONG><a name="[19d]"></a>mbedtls_ssl_set_timer_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_set_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_timer_cb &rArr; ssl_set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_ssl_context_setup
</UL>

<P><STRONG><a name="[19b]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_ssl_context_setup
</UL>

<P><STRONG><a name="[265]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_transform_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[28e]"></a>mbedtls_ssl_write</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_write
</UL>

<P><STRONG><a name="[271]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[274]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[275]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[289]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[290]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_write_version))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[279]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, x509_crt.o(i.mbedtls_x509_crt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
</UL>

<P><STRONG><a name="[18f]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_x509_crt_init))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_options_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[293]"></a>mbedtls_x509_crt_is_revoked</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509_crt.o(i.mbedtls_x509_crt_is_revoked))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_x509_crt_is_revoked &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[190]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, x509_crt.o(i.mbedtls_x509_crt_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_options_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[27a]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[27b]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 418 bytes, Stack size 80 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_with_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[29e]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[29f]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[2a0]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[2a2]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[2a3]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[2a4]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[2a5]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_time &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[348]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x509.o(i.mbedtls_x509_time_is_future))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[294]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x509.o(i.mbedtls_x509_time_is_past))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[177]"></a>mld6_input</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, mld6.o(i.mld6_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mld6_input &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_delayed_report
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_lookfor_group
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
</UL>

<P><STRONG><a name="[2a8]"></a>mld6_joingroup</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, mld6.o(i.mld6_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = mld6_joingroup &rArr; mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_new_group
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_delayed_report
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_tmr
</UL>

<P><STRONG><a name="[2ab]"></a>mld6_leavegroup</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, mld6.o(i.mld6_leavegroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mld6_leavegroup &rArr; mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
</UL>

<P><STRONG><a name="[1a9]"></a>mld6_lookfor_group</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mld6.o(i.mld6_lookfor_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mld6_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_leavegroup
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_joingroup
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_input
</UL>

<P><STRONG><a name="[2ac]"></a>mld6_report_groups</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mld6.o(i.mld6_report_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mld6_report_groups
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_delayed_report
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[2ad]"></a>mld6_stop</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mld6.o(i.mld6_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mld6_stop &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[2ae]"></a>mld6_tmr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mld6.o(i.mld6_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = mld6_tmr &rArr; mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_timer
</UL>

<P><STRONG><a name="[2b0]"></a>mqtt_abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mqtt.o(i.mqtt_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mqtt_abort &rArr; mqtt_client_tcp_abort &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_request_connection
</UL>

<P><STRONG><a name="[123]"></a>mqtt_client_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt.o(i.mqtt_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mqtt_client_init &rArr; client_init &rArr; nrf_tls_free &rArr; interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[2b1]"></a>mqtt_client_tcp_abort</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mqtt_transport.o(i.mqtt_client_tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mqtt_client_tcp_abort &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_disconnection
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_connect
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_abort
</UL>

<P><STRONG><a name="[64]"></a>mqtt_client_tcp_connect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mqtt_transport.o(i.mqtt_client_tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mqtt_client_tcp_connect &rArr; mqtt_client_tcp_abort &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_request_encode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>mqtt_client_tcp_disconnect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mqtt_transport.o(i.mqtt_client_tcp_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mqtt_client_tcp_disconnect &rArr; tcp_close_connection &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>mqtt_client_tcp_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqtt_transport.o(i.mqtt_client_tcp_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = mqtt_client_tcp_read &rArr; mqtt_handle_rx_data &rArr; tcp_close_connection &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_handle_rx_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>mqtt_client_tcp_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mqtt_transport.o(i.mqtt_client_tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mqtt_client_tcp_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_wall_clock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_output_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>mqtt_client_tls_connect</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mqtt_transport.o(i.mqtt_client_tls_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = mqtt_client_tls_connect &rArr; nrf_tls_alloc &rArr; interface_ssl_context_setup &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_alloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_request_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>mqtt_client_tls_disconnect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqtt_transport.o(i.mqtt_client_tls_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mqtt_client_tls_disconnect &rArr; mqtt_client_tcp_disconnect &rArr; tcp_close_connection &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>mqtt_client_tls_output_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mqtt_transport.o(i.mqtt_client_tls_output_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mqtt_client_tls_output_handler &rArr; mqtt_client_tcp_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_transport.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>mqtt_client_tls_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mqtt_transport.o(i.mqtt_client_tls_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = mqtt_client_tls_read &rArr; nrf_tls_input &rArr; interface_continue &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_read
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_input
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_handle_rx_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>mqtt_client_tls_write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, mqtt_transport.o(i.mqtt_client_tls_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = mqtt_client_tls_write &rArr; nrf_tls_write &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>mqtt_connect</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mqtt.o(i.mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = mqtt_connect &rArr; tcp_request_connection &rArr; tcp_new_ip6 &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_request_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[122]"></a>mqtt_disconnect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mqtt.o(i.mqtt_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mqtt_disconnect &rArr; notify_disconnection &rArr; client_init &rArr; nrf_tls_free &rArr; interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_disconnection
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[12d]"></a>mqtt_encode_fixed_header</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mqtt_encoder.o(i.mqtt_encode_fixed_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mqtt_encode_fixed_header &rArr; packet_length_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_length_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_uint8
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_request_encode
</UL>

<P><STRONG><a name="[2b6]"></a>mqtt_handle_rx_data</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, mqtt_transport.o(i.mqtt_handle_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = mqtt_handle_rx_data &rArr; tcp_close_connection &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_wall_clock_get
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_connection
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_utf8_str
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_uint16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_bin_str
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_length_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_read
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_read
</UL>

<P><STRONG><a name="[1bc]"></a>mqtt_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt.o(i.mqtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqtt_init &rArr; nrf_tls_init &rArr; nrf_drv_rng_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_stack_init
</UL>

<P><STRONG><a name="[2c4]"></a>mqtt_live</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mqtt.o(i.mqtt_live))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = mqtt_live &rArr; nrf_tls_process &rArr; interface_continue &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_wall_clock_delta_get
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_process
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ping
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_callback
</UL>

<P><STRONG><a name="[2c7]"></a>mqtt_ping</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mqtt.o(i.mqtt_ping))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_live
</UL>

<P><STRONG><a name="[ee]"></a>mqtt_publish</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mqtt.o(i.mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mqtt_publish &rArr; mqtt_encode_fixed_header &rArr; packet_length_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_utf8_str
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_uint16
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_bin_str
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_encode_fixed_header
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mqtt_publish
</UL>

<P><STRONG><a name="[2ca]"></a>nd6_get_destination_mtu</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nd6.o(i.nd6_get_destination_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nd6_get_destination_mtu &rArr; nd6_find_destination_cache_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_find_destination_cache_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>

<P><STRONG><a name="[178]"></a>nd6_input</STRONG> (Thumb, 1788 bytes, Stack size 48 bytes, nd6.o(i.nd6_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = nd6_input &rArr; mld6_leavegroup &rArr; mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_rs
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_q
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_na
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_new_router
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_new_onlink_prefix
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_new_neighbor_cache_entry
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_get_router
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_get_onlink_prefix
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_find_neighbor_cache_entry
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_find_destination_cache_entry
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_leavegroup
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
</UL>

<P><STRONG><a name="[1b2]"></a>nd6_select_router</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, nd6.o(i.nd6_select_router))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nd6_select_router
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_route
</UL>

<P><STRONG><a name="[2d7]"></a>nd6_tmr</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, nd6.o(i.nd6_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = nd6_tmr &rArr; mld6_joingroup &rArr; mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_rs
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_q
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_ns
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_free_neighbor_cache_entry
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_joingroup
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_timer
</UL>

<P><STRONG><a name="[11d]"></a>netif_add</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ipv4_addr_changed &rArr; tcp_netif_ipv4_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
</UL>

<P><STRONG><a name="[33f]"></a>netif_get_ip6_addr_match</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, netif.o(i.netif_get_ip6_addr_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = netif_get_ip6_addr_match
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1c7]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[11f]"></a>netif_remove</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, netif.o(i.netif_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netif_remove &rArr; tcp_netif_ipv4_addr_changed &rArr; tcp_netif_ipv4_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_stop
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ipv4_addr_changed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
</UL>

<P><STRONG><a name="[2d8]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ipv4_addr_changed &rArr; tcp_netif_ipv4_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[2db]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[2dd]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2de]"></a>netif_set_ipaddr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ipv4_addr_changed &rArr; tcp_netif_ipv4_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ipv4_addr_changed
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ipv4_addr_changed
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2dc]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[116]"></a>netif_set_up</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; mld6_report_groups
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_init
</UL>

<P><STRONG><a name="[2b3]"></a>notify_disconnection</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, mqtt.o(i.notify_disconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = notify_disconnection &rArr; client_init &rArr; nrf_tls_free &rArr; interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_disconnect
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_error_handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_callback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_callback
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_abort
</UL>

<P><STRONG><a name="[2e0]"></a>nrf_calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mem_manager.o(i.nrf_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_calloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_calloc
</UL>

<P><STRONG><a name="[1bb]"></a>nrf_driver_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_platform_port.o(i.nrf_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_driver_init &rArr; iot_context_manager_init &rArr; context_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_stack_init
</UL>

<P><STRONG><a name="[121]"></a>nrf_driver_interface_down</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.nrf_driver_interface_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_driver_interface_down &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
</UL>

<P><STRONG><a name="[11e]"></a>nrf_driver_interface_up</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.nrf_driver_interface_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = nrf_driver_interface_up &rArr; sys_check_timeouts &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
</UL>

<P><STRONG><a name="[2e7]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[df]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[e3]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[139]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[e2]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_gpiote_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[e1]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[2f1]"></a>nrf_drv_rng_bytes_available</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_drv_rng.o(i.nrf_drv_rng_bytes_available))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_vector_generate
</UL>

<P><STRONG><a name="[2ec]"></a>nrf_drv_rng_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_drv_rng.o(i.nrf_drv_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_rng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_init
</UL>

<P><STRONG><a name="[2f2]"></a>nrf_drv_rng_rand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_drv_rng.o(i.nrf_drv_rng_rand))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_vector_generate
</UL>

<P><STRONG><a name="[fd]"></a>nrf_drv_uart_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[ff]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[fe]"></a>nrf_drv_uart_rx_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_uart_rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[101]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[58]"></a>nrf_free</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mem_manager.o(i.nrf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_size
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_stop
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_leavegroup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_output
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_complete
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_interface.o(i.nrf_tls_init)
</UL>
<P><STRONG><a name="[117]"></a>nrf_malloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mem_manager.o(i.nrf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_new_group
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_output
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_options_set
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_continue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_alloc
</UL>

<P><STRONG><a name="[1b9]"></a>nrf_mem_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mem_manager.o(i.nrf_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_mem_init &rArr; block_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_stack_init
</UL>

<P><STRONG><a name="[1c1]"></a>nrf_mem_reserve</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, mem_manager.o(i.nrf_mem_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_size
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_calloc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[2b9]"></a>nrf_tls_alloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tls_interface.o(i.nrf_tls_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = nrf_tls_alloc &rArr; interface_ssl_context_setup &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_ssl_context_setup
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_connect
</UL>

<P><STRONG><a name="[126]"></a>nrf_tls_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tls_interface.o(i.nrf_tls_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_tls_free &rArr; interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_free
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_init
</UL>

<P><STRONG><a name="[2c3]"></a>nrf_tls_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tls_interface.o(i.nrf_tls_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_tls_init &rArr; nrf_drv_rng_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_init
</UL>

<P><STRONG><a name="[2ba]"></a>nrf_tls_input</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, tls_interface.o(i.nrf_tls_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = nrf_tls_input &rArr; interface_continue &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_read
</UL>

<P><STRONG><a name="[2c5]"></a>nrf_tls_process</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_interface.o(i.nrf_tls_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = nrf_tls_process &rArr; interface_continue &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_live
</UL>

<P><STRONG><a name="[2bb]"></a>nrf_tls_read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tls_interface.o(i.nrf_tls_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_tls_read &rArr; app_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_read
</UL>

<P><STRONG><a name="[2bc]"></a>nrf_tls_write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tls_interface.o(i.nrf_tls_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = nrf_tls_write &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tls_write
</UL>

<P><STRONG><a name="[2c8]"></a>pack_bin_str</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mqtt_encoder.o(i.pack_bin_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pack_bin_str &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
</UL>

<P><STRONG><a name="[12b]"></a>pack_uint16</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, mqtt_encoder.o(i.pack_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pack_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_len_str_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_request_encode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_utf8_str
</UL>

<P><STRONG><a name="[12a]"></a>pack_uint8</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mqtt_encoder.o(i.pack_uint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pack_uint8
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_request_encode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_encode_fixed_header
</UL>

<P><STRONG><a name="[129]"></a>pack_utf8_str</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mqtt_encoder.o(i.pack_utf8_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pack_utf8_str &rArr; pack_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_uint16
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_request_encode
</UL>

<P><STRONG><a name="[2bf]"></a>packet_length_decode</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, mqtt_decoder.o(i.packet_length_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = packet_length_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_handle_rx_data
</UL>

<P><STRONG><a name="[2be]"></a>packet_length_encode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mqtt_encoder.o(i.packet_length_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_length_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_encode_fixed_header
</UL>

<P><STRONG><a name="[119]"></a>pbuf_alloc</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pbuf_alloc &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_rs
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_ns
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_na
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>

<P><STRONG><a name="[332]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[31d]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[176]"></a>pbuf_copy</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
</UL>

<P><STRONG><a name="[2d4]"></a>pbuf_copy_partial</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[11b]"></a>pbuf_free</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_rs
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_q
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_ns
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_send_na
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_free_neighbor_cache_entry
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_input
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_input
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_send_response
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blenetif_transport_callback
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_callback
</UL>

<P><STRONG><a name="[2ed]"></a>pbuf_free_ooseq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[1aa]"></a>pbuf_header</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_send
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if_src
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_options_add_hbh_ra
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_src
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[340]"></a>pbuf_header_force</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1a8]"></a>pbuf_realloc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[338]"></a>pbuf_ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
</UL>

<P><STRONG><a name="[5d]"></a>recv_callback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mqtt_transport.o(i.recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = recv_callback &rArr; tcp_close_connection &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_connection
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_disconnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_transport.o(i.tcp_connection_callback)
</UL>
<P><STRONG><a name="[5a]"></a>softdevice_assertion_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_assertion_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_assertion_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[114]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[113]"></a>softdevice_handler_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[115]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[2e1]"></a>sys_check_timeouts</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, timers.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = sys_check_timeouts &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_driver_interface_up
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_callback
</UL>

<P><STRONG><a name="[306]"></a>sys_now</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_platform_port.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>

<P><STRONG><a name="[2af]"></a>sys_timeout</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sys_timeout &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_timer
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_timer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[1ca]"></a>sys_timeouts_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timers.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[308]"></a>tcp_abandon</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[2b2]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ipv4_addr_changed_pcblist
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_abort
</UL>

<P><STRONG><a name="[336]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_request_connection
</UL>

<P><STRONG><a name="[30b]"></a>tcp_alloc</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip6
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[310]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_connection
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_request_connection
</UL>

<P><STRONG><a name="[30e]"></a>tcp_close</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_connection
</UL>

<P><STRONG><a name="[2b5]"></a>tcp_close_connection</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mqtt_transport.o(i.tcp_close_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_close_connection &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_callback
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_handle_rx_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_disconnect
</UL>

<P><STRONG><a name="[317]"></a>tcp_connect</STRONG> (Thumb, 518 bytes, Stack size 32 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_select_source_address
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_route
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_request_connection
</UL>

<P><STRONG><a name="[5e]"></a>tcp_connection_callback</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mqtt_transport.o(i.tcp_connection_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_connection_callback &rArr; notify_disconnection &rArr; client_init &rArr; nrf_tls_free &rArr; interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_disconnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_transport.o(i.tcp_request_connection)
</UL>
<P><STRONG><a name="[60]"></a>tcp_connection_poll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_transport.o(i.tcp_connection_poll))
<BR>[Address Reference Count : 1]<UL><LI> mqtt_transport.o(i.tcp_request_connection)
</UL>
<P><STRONG><a name="[319]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp.o(i.tcp_eff_send_mss_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip6_route &rArr; nd6_select_router
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_route
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_get_destination_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[31a]"></a>tcp_enqueue_flags</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[334]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_request_connection
</UL>

<P><STRONG><a name="[5f]"></a>tcp_error_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mqtt_transport.o(i.tcp_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_error_handler &rArr; notify_disconnection &rArr; client_init &rArr; nrf_tls_free &rArr; interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_disconnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_transport.o(i.tcp_request_connection)
</UL>
<P><STRONG><a name="[31e]"></a>tcp_fasttmr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[1c9]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1ac]"></a>tcp_input</STRONG> (Thumb, 1206 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
</UL>

<P><STRONG><a name="[324]"></a>tcp_keepalive</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tcp_keepalive &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_hinted
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[2da]"></a>tcp_netif_ipv4_addr_changed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp.o(i.tcp_netif_ipv4_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tcp_netif_ipv4_addr_changed &rArr; tcp_netif_ipv4_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ipv4_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[328]"></a>tcp_new_ip6</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(i.tcp_new_ip6))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_new_ip6 &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_request_connection
</UL>

<P><STRONG><a name="[30d]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[316]"></a>tcp_output</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[312]"></a>tcp_pcb_purge</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[309]"></a>tcp_pcb_remove</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[335]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_request_connection
</UL>

<P><STRONG><a name="[31f]"></a>tcp_process_refused_data</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[311]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_callback
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_connection
</UL>

<P><STRONG><a name="[5c]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[2f3]"></a>tcp_recved</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_callback
</UL>

<P><STRONG><a name="[2bd]"></a>tcp_request_connection</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mqtt_transport.o(i.tcp_request_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_request_connection &rArr; tcp_new_ip6 &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip6
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
</UL>

<P><STRONG><a name="[32f]"></a>tcp_rexmit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[330]"></a>tcp_rexmit_fast</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[337]"></a>tcp_rexmit_rto</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[30a]"></a>tcp_rst_impl</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, tcp_out.o(i.tcp_rst_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = tcp_rst_impl &rArr; ip6_output &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[333]"></a>tcp_seg_copy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tcp_seg_copy &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[31c]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[2ee]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[32a]"></a>tcp_send_empty_ack</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tcp_send_empty_ack &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_hinted
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[315]"></a>tcp_send_fin</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2b7]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_connection
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_write
</UL>

<P><STRONG><a name="[339]"></a>tcp_slowtmr</STRONG> (Thumb, 658 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[314]"></a>tcp_timer_needed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[33b]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[313]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[331]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2b4]"></a>tcp_write</STRONG> (Thumb, 996 bytes, Stack size 144 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_add_chksum
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_tcp_disconnect
</UL>

<P><STRONG><a name="[54]"></a>tcp_write_complete_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_transport.o(i.tcp_write_complete_cb))
<BR>[Address Reference Count : 1]<UL><LI> mqtt_transport.o(i.mqtt_client_tcp_write)
</UL>
<P><STRONG><a name="[33a]"></a>tcp_zero_window_probe</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = tcp_zero_window_probe &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_hinted
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[36]"></a>uart_error_handle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_trace.o(i.uart_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_error_handle &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_trace.o(i.app_trace_init)
</UL>
<P><STRONG><a name="[1c8]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1ab]"></a>udp_input</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = udp_input &rArr; icmp6_dest_unreach &rArr; icmp6_send_response &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_dest_unreach
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_ip6_addr_match
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
</UL>

<P><STRONG><a name="[2df]"></a>udp_netif_ipv4_addr_changed</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ipv4_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ipv4_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[2c2]"></a>unpack_bin_str</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, mqtt_decoder.o(i.unpack_bin_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = unpack_bin_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_handle_rx_data
</UL>

<P><STRONG><a name="[2c1]"></a>unpack_uint16</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, mqtt_decoder.o(i.unpack_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = unpack_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_handle_rx_data
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_utf8_str
</UL>

<P><STRONG><a name="[2c0]"></a>unpack_utf8_str</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqtt_decoder.o(i.unpack_utf8_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = unpack_utf8_str &rArr; unpack_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_handle_rx_data
</UL>

<P><STRONG><a name="[12c]"></a>zero_len_str_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_encoder.o(i.zero_len_str_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = zero_len_str_encode &rArr; pack_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_request_encode
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ec]"></a>app_mqtt_publish</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, main.o(i.app_mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_mqtt_publish &rArr; mqtt_publish &rArr; mqtt_encode_fixed_header &rArr; packet_length_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_publish
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[63]"></a>blink_timeout_handler</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, main.o(i.blink_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = blink_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>button_event_handler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, main.o(i.button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = button_event_handler &rArr; mqtt_connect &rArr; tcp_request_connection &rArr; tcp_new_ip6 &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_disconnect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_connect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mqtt_publish
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>connectable_mode_enter</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.connectable_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = connectable_mode_enter &rArr; ipv6_medium_connectable_mode_enter &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_connectable_mode_enter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ipv6_medium_evt
</UL>

<P><STRONG><a name="[44]"></a>iot_timer_tick_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.iot_timer_tick_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iot_timer_tick_callback &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1b7]"></a>ip_stack_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.ip_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ip_stack_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_driver_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_eui64_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>on_ipv6_medium_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.on_ipv6_medium_error))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[45]"></a>on_ipv6_medium_evt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.on_ipv6_medium_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_ipv6_medium_evt &rArr; connectable_mode_enter &rArr; ipv6_medium_connectable_mode_enter &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_mode_enter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[62]"></a>system_timer_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.system_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = system_timer_callback &rArr; mqtt_live &rArr; nrf_tls_process &rArr; interface_continue &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_live
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>icmp_send_response</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[173]"></a>icmp6_send_response</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, icmp6.o(i.icmp6_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = icmp6_send_response &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_select_source_address
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_route
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_param_problem
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp6_dest_unreach
</UL>

<P><STRONG><a name="[182]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_cksum_pseudo_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
</UL>

<P><STRONG><a name="[184]"></a>inet_cksum_pseudo_partial_base</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_cksum_pseudo_partial_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_cksum_pseudo_partial_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo_partial
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[2a7]"></a>mld6_delayed_report</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mld6.o(i.mld6_delayed_report))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_report_groups
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_joingroup
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_input
</UL>

<P><STRONG><a name="[2a9]"></a>mld6_new_group</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mld6.o(i.mld6_new_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mld6_new_group &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_joingroup
</UL>

<P><STRONG><a name="[2aa]"></a>mld6_send</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, mld6.o(i.mld6_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_options_add_hbh_ra
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_tmr
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_leavegroup
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_joingroup
</UL>

<P><STRONG><a name="[2cb]"></a>nd6_find_destination_cache_entry</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nd6.o(i.nd6_find_destination_cache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nd6_find_destination_cache_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_get_destination_mtu
</UL>

<P><STRONG><a name="[2cd]"></a>nd6_find_neighbor_cache_entry</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nd6.o(i.nd6_find_neighbor_cache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nd6_find_neighbor_cache_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_new_router
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
</UL>

<P><STRONG><a name="[2c9]"></a>nd6_free_neighbor_cache_entry</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nd6.o(i.nd6_free_neighbor_cache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nd6_free_neighbor_cache_entry &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_new_neighbor_cache_entry
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_tmr
</UL>

<P><STRONG><a name="[2cc]"></a>nd6_get_onlink_prefix</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, nd6.o(i.nd6_get_onlink_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nd6_get_onlink_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
</UL>

<P><STRONG><a name="[2d2]"></a>nd6_get_router</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nd6.o(i.nd6_get_router))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nd6_get_router
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
</UL>

<P><STRONG><a name="[2d0]"></a>nd6_new_neighbor_cache_entry</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, nd6.o(i.nd6_new_neighbor_cache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nd6_new_neighbor_cache_entry &rArr; nd6_free_neighbor_cache_entry &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_free_neighbor_cache_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_new_router
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
</UL>

<P><STRONG><a name="[2d5]"></a>nd6_new_onlink_prefix</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nd6.o(i.nd6_new_onlink_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nd6_new_onlink_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
</UL>

<P><STRONG><a name="[2d3]"></a>nd6_new_router</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nd6.o(i.nd6_new_router))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = nd6_new_router &rArr; nd6_new_neighbor_cache_entry &rArr; nd6_free_neighbor_cache_entry &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_new_neighbor_cache_entry
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_find_neighbor_cache_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
</UL>

<P><STRONG><a name="[2cf]"></a>nd6_send_na</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, nd6.o(i.nd6_send_na))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nd6_send_na &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
</UL>

<P><STRONG><a name="[2d6]"></a>nd6_send_ns</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, nd6.o(i.nd6_send_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nd6_send_ns &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_tmr
</UL>

<P><STRONG><a name="[2ce]"></a>nd6_send_q</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, nd6.o(i.nd6_send_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nd6_send_q &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_tmr
</UL>

<P><STRONG><a name="[2d1]"></a>nd6_send_rs</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, nd6.o(i.nd6_send_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nd6_send_rs &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_if
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_input
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_tmr
</UL>

<P><STRONG><a name="[2d9]"></a>netif_issue_reports</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netif_issue_reports &rArr; mld6_report_groups
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_report_groups
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[56]"></a>netif_null_output_ip6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_null_output_ip6))
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_add)
</UL>
<P><STRONG><a name="[3b]"></a>blenetif_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_platform_port.o(i.blenetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blenetif_init &rArr; netif_set_up &rArr; netif_issue_reports &rArr; mld6_report_groups
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_platform_port.o(i.blenetif_transport_callback)
</UL>
<P><STRONG><a name="[3c]"></a>blenetif_output</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nrf_platform_port.o(i.blenetif_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = blenetif_output &rArr; ble_6lowpan_interface_send &rArr; iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_interface_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_platform_port.o(i.blenetif_transport_callback)
</UL>
<P><STRONG><a name="[57]"></a>blenetif_transport_callback</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, nrf_platform_port.o(i.blenetif_transport_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = blenetif_transport_callback &rArr; ip6_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_driver_interface_up
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_driver_interface_down
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_input
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_alloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_platform_port.o(i.nrf_driver_init)
</UL>
<P><STRONG><a name="[2ef]"></a>pbuf_header_impl</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>

<P><STRONG><a name="[30f]"></a>tcp_close_shutdown</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[30c]"></a>tcp_kill_state</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[327]"></a>tcp_netif_ipv4_addr_changed_pcblist</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(i.tcp_netif_ipv4_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tcp_netif_ipv4_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ipv4_addr_changed
</UL>

<P><STRONG><a name="[318]"></a>tcp_new_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[32c]"></a>tcp_getoptbyte</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_getoptbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[322]"></a>tcp_listen_input</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[329]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[326]"></a>tcp_parseopt</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_parseopt &rArr; tcp_getoptbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[323]"></a>tcp_process</STRONG> (Thumb, 972 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[32e]"></a>tcp_receive</STRONG> (Thumb, 1872 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[321]"></a>tcp_timewait_input</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst_impl
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[31b]"></a>tcp_create_segment</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tcp_create_segment &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[325]"></a>tcp_output_alloc_header</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[32b]"></a>tcp_output_segment</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_output_hinted
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_chksum_pseudo_partial
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_select_source_address
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_route
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[32d]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; nrf_malloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[33c]"></a>tcp_seg_add_chksum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_seg_add_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_seg_add_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[53]"></a>mld6_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(i.mld6_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = mld6_timer &rArr; mld6_tmr &rArr; mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mld6_tmr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.mld6_timer)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[55]"></a>nd6_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.nd6_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = nd6_timer &rArr; nd6_tmr &rArr; mld6_joingroup &rArr; mld6_send &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nd6_tmr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.nd6_timer)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[61]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip6_output_hinted &rArr; ip6_output_if &rArr; ip6_output_if_src &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.tcp_timer_needed)
<LI> timers.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[ce]"></a>ble_device_addr_encode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[d1]"></a>conn_int_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[cd]"></a>le_role_encode</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ble_advdata.o(i.le_role_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = le_role_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[d2]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[d4]"></a>name_encode</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[d3]"></a>service_data_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[cf]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[d0]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[342]"></a>uuid_list_sized_encode</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[37]"></a>uart_event_handler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[2e6]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[2e4]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[bb]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2e5]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[bc]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2e2]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[2e3]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[102]"></a>apply_config</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[2ea]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[104]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[103]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[c5]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>rx_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>rx_done_event</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[2e8]"></a>rx_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[c7]"></a>tx_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>tx_done_event</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>context_find_by_cid</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iot_context_manager.o(i.context_find_by_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = context_find_by_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_cid
</UL>

<P><STRONG><a name="[130]"></a>context_find_by_prefix</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, iot_context_manager.o(i.context_find_by_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_addr
</UL>

<P><STRONG><a name="[133]"></a>context_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iot_context_manager.o(i.context_init))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_table_init
</UL>

<P><STRONG><a name="[1a0]"></a>context_table_find</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iot_context_manager.o(i.context_table_find))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_alloc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_cid
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_addr
</UL>

<P><STRONG><a name="[132]"></a>context_table_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, iot_context_manager.o(i.context_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = context_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_table_free
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_init
</UL>

<P><STRONG><a name="[d5]"></a>adv_params_set</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ipv6_medium_ble.o(i.adv_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adv_params_set &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[39]"></a>ble_evt_dispatch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipv6_medium_ble.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ble_evt_dispatch &rArr; on_ble_evt &rArr; ble_ipsp_evt_handler &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipv6_medium_ble.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[112]"></a>ble_stack_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ipv6_medium_ble.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_stack_init &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[16e]"></a>gap_params_apply</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ipv6_medium_ble.o(i.gap_params_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gap_params_apply &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[16f]"></a>gap_params_set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ipv6_medium_ble.o(i.gap_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6_medium_init
</UL>

<P><STRONG><a name="[10c]"></a>on_ble_evt</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ipv6_medium_ble.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = on_ble_evt &rArr; ble_ipsp_evt_handler &rArr; channel_search
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[3a]"></a>sys_evt_dispatch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6_medium_ble.o(i.sys_evt_dispatch))
<BR>[Address Reference Count : 1]<UL><LI> ipv6_medium_ble.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[35]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = detection_delay_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[34]"></a>gpiote_event_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[e7]"></a>fifo_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_read
</UL>

<P><STRONG><a name="[e9]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_write
</UL>

<P><STRONG><a name="[f1]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[f3]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[f7]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[f2]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[127]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[33d]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[33e]"></a>list_deletions_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_deletions_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1c4]"></a>list_insertions_handler</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[f0]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[be]"></a>timer_list_handler</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[bd]"></a>timer_timeouts_check</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_timeouts_check &rArr; app_error_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>user_id_get</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[f6]"></a>user_op_alloc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[2e9]"></a>block_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mem_manager.o(i.block_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
</UL>

<P><STRONG><a name="[171]"></a>get_block_cat</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, mem_manager.o(i.get_block_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_block_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_size
</UL>

<P><STRONG><a name="[170]"></a>get_block_size</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mem_manager.o(i.get_block_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
</UL>

<P><STRONG><a name="[1d2]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, asn1parse.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[211]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>

<P><STRONG><a name="[20f]"></a>mpi_montmul</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[210]"></a>mpi_montred</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[214]"></a>mpi_mul_hlp</STRONG> (Thumb, 898 bytes, Stack size 20 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>

<P><STRONG><a name="[215]"></a>mpi_sub_hlp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>

<P><STRONG><a name="[47]"></a>add_one_and_zeros_padding</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cipher.o(i.add_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = add_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[49]"></a>add_zeros_and_len_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cipher.o(i.add_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[4b]"></a>add_zeros_padding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.add_zeros_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[4d]"></a>get_no_padding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.get_no_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[48]"></a>get_one_and_zeros_padding</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, cipher.o(i.get_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[4a]"></a>get_zeros_and_len_padding</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cipher.o(i.get_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[4c]"></a>get_zeros_padding</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, cipher.o(i.get_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[1e1]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_get_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>

<P><STRONG><a name="[6e]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, cipher_wrap.o(i.aes_crypt_cbc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>aes_ctx_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>aes_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>derive_mpi</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ecdsa.o(i.derive_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[13d]"></a>ecdsa_signature_to_asn1</STRONG> (Thumb, 98 bytes, Stack size 168 bytes, ecdsa.o(i.ecdsa_signature_to_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ecdsa_signature_to_asn1 &rArr; mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[146]"></a>ecp_add_mixed</STRONG> (Thumb, 850 bytes, Stack size 112 bytes, ecp.o(i.ecp_add_mixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[153]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, ecp.o(i.ecp_check_pubkey_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[155]"></a>ecp_comb_fixed</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ecp.o(i.ecp_comb_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecp_comb_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[14e]"></a>ecp_double_jac</STRONG> (Thumb, 976 bytes, Stack size 80 bytes, ecp.o(i.ecp_double_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[1f9]"></a>ecp_get_type</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ecp.o(i.ecp_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[14b]"></a>ecp_modp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ecp.o(i.ecp_modp))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[15f]"></a>ecp_mul_comb</STRONG> (Thumb, 400 bytes, Stack size 360 bytes, ecp.o(i.ecp_mul_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[162]"></a>ecp_mul_comb_core</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, ecp.o(i.ecp_mul_comb_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[164]"></a>ecp_normalize_jac</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, ecp.o(i.ecp_normalize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[16b]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 474 bytes, Stack size 88 bytes, ecp.o(i.ecp_normalize_jac_many))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[160]"></a>ecp_precompute_comb</STRONG> (Thumb, 216 bytes, Stack size 176 bytes, ecp.o(i.ecp_precompute_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[169]"></a>ecp_randomize_jac</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, ecp.o(i.ecp_randomize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[163]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ecp.o(i.ecp_safe_invert_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[167]"></a>ecp_select_comb</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ecp.o(i.ecp_select_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[1fd]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ecp.o(i.mbedtls_ecp_mul_shortcuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[15c]"></a>add32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ecp_curves.o(i.add32))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[158]"></a>ecp_group_load</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ecp_curves.o(i.ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecp_group_load
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[4e]"></a>ecp_mod_p256</STRONG> (Thumb, 1092 bytes, Stack size 88 bytes, ecp_curves.o(i.ecp_mod_p256))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ecp_mod_p256 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[159]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(i.ecp_mpi_load))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[15d]"></a>sub32</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ecp_curves.o(i.sub32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[209]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, md.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[79]"></a>md5_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_clone_wrap &rArr; mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>md5_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.md5_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>md5_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.md5_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>md5_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = md5_finish_wrap &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>md5_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = md5_process_wrap &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>md5_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>md5_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = md5_update_wrap &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>sha1_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>sha1_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>sha1_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>sha1_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>sha1_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>sha1_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>sha1_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>sha224_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>sha224_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>sha224_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>sha224_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>sha224_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>sha224_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>sha224_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>sha224_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>sha256_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>sha256_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>sha384_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_clone_wrap &rArr; mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>sha384_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>sha384_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>sha384_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = sha384_finish_wrap &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>sha384_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sha384_process_wrap &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>sha384_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>sha384_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = sha384_update_wrap &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>sha384_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = sha384_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>sha512_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>sha512_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = sha512_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, oid.o(i.oid_sig_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>

<P><STRONG><a name="[21d]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pem.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[221]"></a>pem_aes_decrypt</STRONG> (Thumb, 86 bytes, Stack size 352 bytes, pem.o(i.pem_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[2f0]"></a>pem_pbkdf1</STRONG> (Thumb, 164 bytes, Stack size 128 bytes, pem.o(i.pem_pbkdf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pem_pbkdf1 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[22f]"></a>pk_hashlen_helper</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(i.pk_hashlen_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
</UL>

<P><STRONG><a name="[ad]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>ecdsa_can_do</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk_wrap.o(i.ecdsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>ecdsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.ecdsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, pk_wrap.o(i.ecdsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pk_wrap.o(i.ecdsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>eckey_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>eckey_can_do</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>eckey_check_pair</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_check_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>eckey_debug</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_debug))
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>eckey_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>eckey_get_bitlen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_get_bitlen))
<BR>[Address Reference Count : 3]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>eckey_sign_wrap</STRONG> (Thumb, 76 bytes, Stack size 224 bytes, pk_wrap.o(i.eckey_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>eckey_verify_wrap</STRONG> (Thumb, 68 bytes, Stack size 208 bytes, pk_wrap.o(i.eckey_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>eckeydh_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.eckeydh_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>rsa_alloc_wrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>rsa_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_check_pair_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>rsa_debug</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_debug))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, pk_wrap.o(i.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3232<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, pk_wrap.o(i.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>rsa_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>rsa_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_get_bitlen))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>rsa_sign_wrap</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, pk_wrap.o(i.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>rsa_verify_wrap</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, pk_wrap.o(i.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[22d]"></a>pk_get_ecpubkey</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_ecpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[22a]"></a>pk_get_pk_alg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[22b]"></a>pk_get_rsapubkey</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, pkparse.o(i.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[225]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, pkparse.o(i.pk_parse_key_pkcs1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[228]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, pkparse.o(i.pk_parse_key_pkcs8_unencrypted_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[227]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, pkparse.o(i.pk_parse_key_sec1_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[22c]"></a>pk_use_ecparams</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pkparse.o(i.pk_use_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pk_use_ecparams &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[1]"></a>platform_calloc_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform.o(i.platform_calloc_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>platform_free_uninit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(i.platform_free_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[241]"></a>rsa_prepare_blinding</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[2fa]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_ssl_own_key))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>

<P><STRONG><a name="[2fc]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_cli.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[26f]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_parse_certificate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[2fb]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_parse_renegotiation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_fatal_handshake_failure &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[26c]"></a>ssl_parse_server_hello</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_parse_server_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; tls1_prf &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[26e]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 522 bytes, Stack size 312 bytes, ssl_cli.o(i.ssl_parse_server_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ssl_parse_server_key_exchange &rArr; mbedtls_ssl_read_record &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[273]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, ssl_cli.o(i.ssl_write_certificate_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls1_prf &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[26b]"></a>ssl_write_client_hello</STRONG> (Thumb, 654 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_client_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[272]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_client_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_psk_derive_premaster
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[305]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_supported_elliptic_curves_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_supported_elliptic_curves_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[2f4]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_cipher_get_cipher_mode))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[27d]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[260]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
</UL>

<P><STRONG><a name="[51]"></a>ssl_calc_finished_tls</STRONG> (Thumb, 132 bytes, Stack size 256 bytes, ssl_tls.o(i.ssl_calc_finished_tls))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ssl_calc_finished_tls &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[50]"></a>ssl_calc_verify_tls</STRONG> (Thumb, 78 bytes, Stack size 192 bytes, ssl_tls.o(i.ssl_calc_verify_tls))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ssl_calc_verify_tls &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[27f]"></a>ssl_check_ctr_renegotiate</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_check_ctr_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[287]"></a>ssl_decrypt_buf</STRONG> (Thumb, 702 bytes, Stack size 136 bytes, ssl_tls.o(i.ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[291]"></a>ssl_encrypt_buf</STRONG> (Thumb, 394 bytes, Stack size 64 bytes, ssl_tls.o(i.ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[28c]"></a>ssl_handshake_init</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_handshake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>

<P><STRONG><a name="[286]"></a>ssl_parse_record_header</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_parse_record_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[284]"></a>ssl_prepare_handshake_record</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_prepare_handshake_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[280]"></a>ssl_set_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[281]"></a>ssl_start_renegotiation</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_start_renegotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[52]"></a>ssl_update_checksum_md5sha1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_md5sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ssl_update_checksum_md5sha1 &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[5b]"></a>ssl_update_checksum_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.ssl_handshake_init)
</UL>
<P><STRONG><a name="[4f]"></a>tls1_prf</STRONG> (Thumb, 466 bytes, Stack size 232 bytes, ssl_tls.o(i.tls1_prf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls1_prf &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[187]"></a>interface_alloc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tls_interface.o(i.interface_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = interface_alloc &rArr; interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_alloc
</UL>

<P><STRONG><a name="[189]"></a>interface_conf_setup</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, tls_interface.o(i.interface_conf_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = interface_conf_setup &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_options_set
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_psk
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_alloc
</UL>

<P><STRONG><a name="[195]"></a>interface_continue</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tls_interface.o(i.interface_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = interface_continue &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_write
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_input
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_process
</UL>

<P><STRONG><a name="[188]"></a>interface_free</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tls_interface.o(i.interface_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = interface_free &rArr; mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_alloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_free
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_alloc
</UL>

<P><STRONG><a name="[199]"></a>interface_ssl_context_setup</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tls_interface.o(i.interface_ssl_context_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = interface_ssl_context_setup &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_tls_alloc
</UL>

<P><STRONG><a name="[40]"></a>interface_transport_read</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tls_interface.o(i.interface_transport_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = interface_transport_read &rArr; app_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_interface.o(i.interface_ssl_context_setup)
</UL>
<P><STRONG><a name="[41]"></a>interface_transport_write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tls_interface.o(i.interface_transport_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interface_transport_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_interface.o(i.interface_ssl_context_setup)
</UL>
<P><STRONG><a name="[3f]"></a>mbedtls_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tls_interface.o(i.mbedtls_log))
<BR>[Address Reference Count : 1]<UL><LI> tls_interface.o(i.interface_conf_setup)
</UL>
<P><STRONG><a name="[3e]"></a>random_vector_generate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tls_interface.o(i.random_vector_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = random_vector_generate
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_interface.o(i.interface_conf_setup)
</UL>
<P><STRONG><a name="[42]"></a>tls_get_timer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tls_interface.o(i.tls_get_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_get_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_wall_clock_delta_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_interface.o(i.interface_ssl_context_setup)
</UL>
<P><STRONG><a name="[43]"></a>tls_set_timer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tls_interface.o(i.tls_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_timer_wall_clock_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_interface.o(i.interface_ssl_context_setup)
</UL>
<P><STRONG><a name="[194]"></a>verify_options_set</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tls_interface.o(i.verify_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = verify_options_set &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_malloc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_conf_setup
</UL>

<P><STRONG><a name="[59]"></a>wrapper_calloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_interface.o(i.wrapper_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wrapper_calloc &rArr; nrf_calloc &rArr; nrf_mem_reserve &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_interface.o(i.nrf_tls_init)
</UL>
<P><STRONG><a name="[2a1]"></a>x509_get_attr_type_value</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, x509.o(i.x509_get_attr_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[2a6]"></a>x509_parse_int</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, x509.o(i.x509_parse_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[292]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[297]"></a>x509_check_wildcard</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, x509_crt.o(i.x509_check_wildcard))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[29b]"></a>x509_crt_check_parent</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, x509_crt.o(i.x509_crt_check_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[295]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 742 bytes, Stack size 112 bytes, x509_crt.o(i.x509_crt_parse_der_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[29c]"></a>x509_crt_verify_child</STRONG> (Thumb, 484 bytes, Stack size 144 bytes, x509_crt.o(i.x509_crt_verify_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + In Cycle
<LI>Call Chain = x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[29d]"></a>x509_crt_verify_top</STRONG> (Thumb, 416 bytes, Stack size 136 bytes, x509_crt.o(i.x509_crt_verify_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = x509_crt_verify_top &rArr; x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[34b]"></a>x509_crt_verifycrl</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, x509_crt.o(i.x509_crt_verifycrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[34c]"></a>x509_get_basic_constraints</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_basic_constraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[347]"></a>x509_get_crt_ext</STRONG> (Thumb, 474 bytes, Stack size 96 bytes, x509_crt.o(i.x509_get_crt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[34d]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_subject_alt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[346]"></a>x509_get_uid</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509_crt.o(i.x509_get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[296]"></a>x509_memcasecmp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, x509_crt.o(i.x509_memcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[345]"></a>x509_name_cmp</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, x509_crt.o(i.x509_name_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_name_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[29a]"></a>x509_profile_check_key</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, x509_crt.o(i.x509_profile_check_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = x509_profile_check_key
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[349]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[299]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[106]"></a>instance_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_6lowpan.o(i.instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[186]"></a>interface_add</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_6lowpan.o(i.interface_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interface_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[1bd]"></a>iphc_decode</STRONG> (Thumb, 972 bytes, Stack size 64 bytes, ble_6lowpan.o(i.iphc_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iphc_decode &rArr; iot_context_manager_get_by_cid &rArr; context_find_by_cid
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_cid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_nhc_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[109]"></a>iphc_encode</STRONG> (Thumb, 1120 bytes, Stack size 120 bytes, ble_6lowpan.o(i.iphc_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = iphc_encode &rArr; iot_context_manager_get_by_addr &rArr; context_find_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_context_manager_get_by_addr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_context_cover_iid
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_nhc_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_interface_send
</UL>

<P><STRONG><a name="[1be]"></a>iphc_nhc_decode</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ble_6lowpan.o(i.iphc_nhc_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iphc_nhc_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
</UL>

<P><STRONG><a name="[1c0]"></a>iphc_nhc_encode</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ble_6lowpan.o(i.iphc_nhc_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iphc_nhc_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
</UL>

<P><STRONG><a name="[38]"></a>ipsp_evt_handler</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, ble_6lowpan.o(i.ipsp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ipsp_evt_handler &rArr; iphc_decode &rArr; iot_context_manager_get_by_cid &rArr; context_find_by_cid
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mem_reserve
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_disconnect
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_complete
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_decode
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interface_add
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_6lowpan.o(i.ble_6lowpan_init)
</UL>
<P><STRONG><a name="[1bf]"></a>is_context_cover_iid</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_6lowpan.o(i.is_context_cover_iid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = is_context_cover_iid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphc_encode
</UL>

<P><STRONG><a name="[1c2]"></a>tx_complete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_6lowpan.o(i.tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tx_complete &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[10a]"></a>tx_send</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_6lowpan.o(i.tx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tx_send &rArr; tx_complete &rArr; nrf_free &rArr; get_block_size &rArr; get_block_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_send
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_6lowpan_interface_send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipsp_evt_handler
</UL>

<P><STRONG><a name="[110]"></a>channel_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_ipsp.o(i.channel_init))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_evt_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_init
</UL>

<P><STRONG><a name="[10e]"></a>channel_search</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ble_ipsp.o(i.channel_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = channel_search
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_evt_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_send
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ipsp_disconnect
</UL>

<P><STRONG><a name="[c9]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[cb]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ca]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
